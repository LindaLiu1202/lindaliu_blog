{
  
    
        "post0": {
            "title": "Unit 7 ArrayList Hacks",
            "content": "// HACK!!!! // Create an arrayList and use one of the cool methods for it import java.util.ArrayList; public class hack1 { public static void main (String[] args) { ArrayList&lt;String&gt; names = new ArrayList&lt;String&gt;(); names.add(&quot;Linda&quot;); names.add(&quot;Emily&quot;); names.remove(0); System.out.println(names.size()); System.out.println(names); } } hack1.main(null); . 1 [Emily] . //hack 2 import java.util.ArrayList; public class hack2 { public static void main (String[] args) { ArrayList&lt;String&gt; color = new ArrayList&lt;String&gt;(); color.add(&quot;red apple&quot;); color.add(&quot;green box&quot;); color.add(&quot;blue water&quot;); color.add(&quot;red panda&quot;); for (int i=0; i&lt;color.size(); i++){ if(color.get(i).contains(&quot;red&quot;)) { color.remove(i); } } System.out.println(color); } } hack2.main(null); /*/ using if(color.get(i).contains(&quot;red&quot;)) iterate through the arraylist and remove all elements that contain the word red in them /*/ . [green box, blue water] . //hack 3 // find the sum of the elements in the arraylist ArrayList&lt;Integer&gt; num = new ArrayList&lt;Integer&gt;(); num.add(5); num.add(1); num.add(3); int sum = 0; for (int i=0; i&lt;num.size(); i++) { sum += num.get(i); } System.out.println(sum); . 9 .",
            "url": "https://lindaliu1202.github.io/lindaliu_blog/jupyter/2022/12/05/unit6.html",
            "relUrl": "/jupyter/2022/12/05/unit6.html",
            "date": " • Dec 5, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "FRQ 3",
            "content": "import java.util.ArrayList; public class Delimiters { // part1 private instances variables global variables private String openDel; private String closeDel; // part2 constructors public Delimiters(String open, String close) { openDel=open; closeDel=close; } // part3 non-constructor methods normal methods public ArrayList&lt;String&gt; getDelimitersList(String[] tokens){ // ArrayList&lt;DataType&gt; ListName = new ArrayList&lt;DataType&gt;(); ArrayList&lt;String&gt; delimiters = new ArrayList&lt;String&gt;(); for(int i=0; i&lt;tokens.length; i++){ if(tokens[i].equals(openDel) || tokens[i].equals(closeDel)){ delimiters.add(tokens[i]); } } return delimiters; } public boolean isBalanced(ArrayList&lt;String&gt; delimiters){ int countOpen=0; int countClose=0; for (int i=0; i&lt;delimiters.size(); i++){ if (delimiters.get(i).equals(openDel)){ countOpen++; } else { countClose++; } if(countClose &gt; countOpen) return false; } return countOpen == countClose; } } . Notes on Difference for Looping through Array, ArrayLists, String . String str for(int i=0; i&lt;str.length(); i++) str.substring(i,i+1) // means get every character in String 01234 &quot;Linda&quot;.substring(0,1) &quot;Linda&quot;.substring(4) .substring(start , end) [start, end) from start to end-1 . Array arr for(int i=0; i&lt;arr.length; i++) arr[i] // means get every element in the arr . ArrayList list for(int i=0; i&lt;list.size(); i++) list.get(i) // means get every item in the ArrayList .",
            "url": "https://lindaliu1202.github.io/lindaliu_blog/jupyter/2022/12/03/frq3.html",
            "relUrl": "/jupyter/2022/12/03/frq3.html",
            "date": " • Dec 3, 2022"
        }
        
    
  
    
        ,"post2": {
            "title": "Title",
            "content": "Binary Search . //iteration method binarySearch(arr, x, low, high) repeat till low = high mid = (low + high)/2 if (x == arr[mid]) return mid else if (x &gt; arr[mid]) // x is on the right side low = mid + 1 else // x is on the left side high = mid - 1 . //recursive method (divide and conquer approach) binarySearch(arr, x, low, high) if low &gt; high return False else mid = (low + high) / 2 if x == arr[mid] return mid else if x &gt; arr[mid] // x is on the right side return binarySearch(arr, x, mid + 1, high) else // x is on the left side return binarySearch(arr, x, low, mid - 1) . Polymorphism: any of overloading, overriding, late binding . . At run time, objects of a derived class may be treated as objects of a base class in places such as method parameters and collections or arrays. When this polymorphism occurs, the object&#39;s declared type is no longer identical to its run-time ty . Late binding of object, referencing superclass object, ie Animal a = new Chicken(); Animal b = new Goat(); . ? . Standard methods: toString(), equals(), hashCode() . The toString method is used to return a string representation of an object. If any object is printed, the toString() method is internally invoked by the java compiler. Else, the user implemented or overridden toString() method is called. If you override the toString() method of the Object class, it will return values of the object, hence you are not required to write a lot of code. . 1) first implementation is when it is called as a method of an object instance . class HelloWorld { public static void main( String args[] ) { //Creating an integer of value 10 Integer number=10; // Calling the toString() method as a function of the Integer variable System.out.println( number.toString() ); } } . 2) second implementation is when you call the member method of the relevant class by passing the value as an argument . class HelloWorld { public static void main( String args[] ) { // The method is called on datatype Double // It is passed the double value as an argument System.out.println(Double.toString(11.0)); // Implementing this on other datatypes //Integer System.out.println(Integer.toString(12)); // Long System.out.println(Long.toString(123213123)); // Booleam System.out.println(Boolean.toString(false)); } } . The equals() method compares two strings, and returns true if the strings are equal, and false if not. . Tip: Use the compareTo() method to compare two strings lexicographically. . //syntax public boolean equals(Object anotherObject) . hashCode() returns an integer value, generated by a hashing algorithm .",
            "url": "https://lindaliu1202.github.io/lindaliu_blog/2022/11/30/vocabs.html",
            "relUrl": "/2022/11/30/vocabs.html",
            "date": " • Nov 30, 2022"
        }
        
    
  
    
        ,"post3": {
            "title": "Unit 2 Using Objects",
            "content": "Grade: .95/1 . MCQ: 1/1 . FRQ: 0.9/1 . 2021 FRQ . This question involves the WordMatch class, which stores a secret string and provides methods that compare other strings to the secret string. You will write two methods in the WordMatch class. . 1a . Write the WordMatch method scoreGuess. To determine the score to be returned, scoreGuess finds the number of times that guess occurs as a substring of secret and then multiplies that number by the square of the length of guess. Occurrences of guess may overlap within secret. . thoughts before writing code: . number of times guess occurs - counter? for loop, if guess = substring of secret, counter++ multiplies by the square of the length of guess - guess.length(), times the length two times return score . public int scoreGuess(String guess) { counter = 0; for (i = 0, i &lt;= secret.length(), i++) { //bound error would occur if (guess == substring.secret(i)) { //didn&#39;t account for guess that has multiple characters counter ++; } } score = counter * guess.length() * guess.length(); return score; } . | for (i = 0, i &lt;= secret.length(), i++) { //bound error would occur not a statement | for (i = 0, i &lt;= secret.length(), i++) { //bound error would occur &#39;;&#39; expected . Example Solution . public int scoreGuess(String guess){ int count = 0; for(int i = 0; i &lt; secret.length()-guess.length(); i++){ //avoid bound error if(secret.substring(i, i+guess.length()).equals(guess)){ . //account for guess lenghh &gt; 1 count ++; } } return count * guess.length() * guess.length(); } . Grade Myself According to AP Scoring Guidelines (i know it&#39;s not going to be good) . 2/5 . places that i missed points on: . Compares guess to a substring of secret - Responses will not earn the point if they use == instead of equals . Loops through all necessary substrings of secret (no bounds errors) - Responses will not earn the point if they skip overlapping occurrences . Loops through all necessary substrings of secret (no bounds errors) - Responses will not earn the point if they skip overlapping occurrences . avoid index out of bound (condition for for loop -&gt; i &lt; secret.length() - guess.length() ) . Comparing String vs Comparing Numbers . comparing numbers - use == comparing strings - use .equal() . 1b . Write the WordMatch method findBetterGuess, which returns the better guess of its two String parameters, guess1 and guess2. If the scoreGuess method returns different values for guess1 and guess2, then the guess with the higher score is returned. If the scoreGuess method returns the same value for guess1 and guess2, then the alphabetically greater guess is returned. . Thoughts before writing code . 1) if guess1 and guess 2 have different values from scoreGuess method, compared which one is higher and reture the one, so use if else statement to compare 2) if same value, compared the alphabet using if statement (.compareTo()) . public String findBetterGuess(String guess1, String guess2){ if (scoreGuess(guess1) != scoreGuess(guess1)){ . //different values if (scoreGuess(guess1) &gt; scoreGuess(guess1)){ return guess1; } else return guess2; } else if (scoreGuess(guess1) = scoreGuess(guess1)){ //same value if(guess1.compareTo(guess2) &gt; 0) { return guess1; } else return guess2; } } . Solution . public String findBetterGuess(String guess1, String guess2){ if (score.Guess(guess1) &gt; score.Guess(guess1)){ return guess1; } if (score.Guess(guess1) &lt; score.Guess(guess1)){ return guess2; } if(guess1.compareTo(guess2) &gt; 0) { return guess1; } return guess2; } . Grade Myself According to AP Scoring Guidelines (did better on this one) . 4/4 . .compareTo() . .compareTo() compares two strings lexicographically returns 0 if the string is equal to the other string. A value less than 0 is returned if the string is less than the other string (less characters) and a value greater than 0 if the string is greater than the other string (more characters) . Reflection . Tbh this is the only frq that I did without looking things up on the internet, I wrote the code purely based on my existing knowledge. For me, the hardest part of these frqs was understanding the prompts and really knowing what I needed to write, I often became impatient because I didn&#39;t understand what I needed to write and I didn&#39;t know what those tables or other provided methods did. Because before I just wanted to get the assignment done, but now I know I&#39;m not doing it for the grader or the teacher, I need to do more exercises like this to work on my knowledge and blog about what I did wrong and what I learned from it so that I can improve later on. . part b is relatively easier than part a for me because it is about comparing and making if else statement while part a requires more thinking and not only need if else statement. . . Completed with Divya, but we don&#39;t have permission to the google form anymore, but here is an evidence .",
            "url": "https://lindaliu1202.github.io/lindaliu_blog/jupyter/2022/11/30/unit2.html",
            "relUrl": "/jupyter/2022/11/30/unit2.html",
            "date": " • Nov 30, 2022"
        }
        
    
  
    
        ,"post4": {
            "title": "2019 FRQ 1",
            "content": "Part 1 . When doing FRQ, can first write down steps of what we need, if statement? for loop? counter? Remember to initialize variable, like count, day, year... Make sure to return the right thing, return count instead of year. . public static int numberOfLeapYears (int year1, int year2){ //check IF year 1 is leap year or not, if not check year 1 + 1, and so on (for loop + if statement) //year 1 should be less than year 2 (condition) //then add up all the leap years (count) //isLeapYear(year) returns true if year is a leap year and false otherwise. int count = 0; //initialize count, count should be outside of the for loop for (int y = year1; y &lt;= year2; y++) { // for each year between year 1 and year 2 if (isLeapYear(y)) { //if y is leap year (using the isLeapYear() method) count++; //count plus 1 } } return count; //return the total number of leap years } . Part 2 . // returns the integer value representing the day of the week for the given date (month, day, year), where 0 denotes Sunday, 1 denotes Monday, ..., and 6denotes Saturday // two helper methods: firstDayOfYear(year), dayOfYear(month, day, year) public static int dayOfWeek (int month, int day, int year) { //remember to define data type int firstDay = firstDayOfYear(year); //return the int value representing the day of the week for the first day of year int nthDay = dayOfYear(month, day, year); //return n, where month, day, and year specify the nth day of the year int returnDay = (nthDay + firstDay - 1) % 7; //return based on a 0-indexed array instead of the 1-based list of days, gives us the right day of the week //% 7 at the end takes care of keeping the value within the bounds of the day of week index return returnDay; //return .",
            "url": "https://lindaliu1202.github.io/lindaliu_blog/jupyter/2022/11/18/frq.html",
            "relUrl": "/jupyter/2022/11/18/frq.html",
            "date": " • Nov 18, 2022"
        }
        
    
  
    
        ,"post5": {
            "title": "2014 Practice Exam MCQ Corrections",
            "content": ". Q11 seqSearchRecHelper change . . My answer: A - if (last &lt;= 0) return -1; . Correction answer: B - if (last = 0) return -1; . Explanation: The seqSearchRecHelper recursive method does not work as intended when target does not appear in data. In this case, when last becomes -1, the method will throw an ArrayIndexOutOfBoundsException in the first if statement after line 1. To prevent this, we should add a check to see if last is less than 0 and if it is, return -1 as expected. . So, no equal sign because the equal sign will prevent an ArrayIndexOutOfBoundsException from being thrown if target does not appear in data. . Q15 isSorted 1D int array implementations . . My answer: D - l and ll only (no idea) . Correction answer: A - l only . Explanation: Choice II has a loop control variable k that starts at 0, increments by 1, and will terminate the loop when k has the value data.length. In each iteration, there is a check to see if the current value is larger than the subsequent value. If it is, false is returned because elements would not be nondecreasing. For example, if data[k] had the value 5 and data[k + 1] had the value 4, then data would contain an instance where the values were decreasing. Unfortunately, since the indices of an array start at 0 and go through data.length – 1, when k has the value data.length – 1 an ArrayIndexOutOfBoundsException will be thrown as the condition attempts to check data[data.length – 1] and data[data.length – 1 + 1] or data[data.length]. . Q17 Shift elements in 1D int array . . My answer: A {1, 2, 3, 4, 5, 6, 7} . Correction answer: C {1, 2, 3, 5, 6, 7, 7} . Explanation: The for loop control variable k starts with the value 3, is incremented by 1 and terminates the loop when its value is arr.length – 1. In the first iteration, when k is 3, arr[3] is assigned the value arr[4]. The contents of the arr have been updated to {1, 2, 3, 5, 5, 6, 7}. In the second iteration, when k is 4, arr[4] is assigned the value arr[5]. The contents of arr have been updated to {1, 2, 3, 5, 6, 6, 7}. In the third iteration, when k is 5, arr[5] is assigned the value arr[6]. The contents of arr have been updated to {1, 2, 3, 5, 6, 7, 7}. Then k is incremented to 6 and the loop terminates. . Q18 Generate random index for ArrayList . Assume that myList is an ArrayList that has been correctly constructed and populated with objects. Which of the following expressions produces a valid random index for myList? . My answer: C - (int) ( Math.random () * myList.size () ) + 1 . Correction answer: B - (int) ( Math.random () * myList.size () ) . Explanation: C is incorrect because the indices for myList are 0 through myList.size() – 1, for a total of myList.size() elements. Using this statement will result in a range between 1 and myList.size(). . Q22 Book and AudioBook classes . . . My answer: accidently skip this question . Correct answer: Line 4 will not compile because variables of type Book may only call methods in the Book class. . Explanation: Since the books array has been declared of type Book, at compile time all objects stored in books are considered Book object regardless of their actual type. Therefore, any methods that are called on elements of books must be declared in Book. In order to call the pagesPerMinute() method on Book[0], we would need to use typecasting to let the compiler know that the object stored in the books array at this index is actually an AudioBook object. . Q23 manipulate method and animals List . . My answer: D - [&quot;bear&quot;, &quot;baboon&quot;, &quot;zebra&quot;, &quot;bass&quot;, &quot;cat&quot;, &quot;koala&quot;] . Correct answer: B - [&quot;bear&quot;, &quot;zebra&quot;, &quot;bass&quot;, &quot;cat&quot;, &quot;koala&quot;, &quot;baboon&quot;] . Explanation: D would be the case if the loop condition was k &gt; 1 rather than k &gt; 0. Didn&#39;t fully understand the code. (B) The manipulate method contains a for loop with a loop control variable k that starts at the right most index of animals, decrements by 1 each time, until k is equal to 0. In the first iteration, when k is 5, if the element of animals at 5 (“baboon”) starts with a “b”, which it does, then this value is removed from the list and inserted at index 1. The list would then be {“bear”, “baboon”, “zebra”, “bass”, “cat”, “koala”}. In the second iteration, when k is 4, the element of animals at 4 (“cat”) does not start with a “b” and no changes are made to the list. In the third iteration, when k is 3, the element of animals at 3 (“bass”) starts with a “b”. This value is removed from the list and inserted at index 3. Since it was already at index 3, the list would not change. In the fourth iteration, when k is 2, the element of animals at 2 (“zebra”) does not start with a “b” and no changes are made to the list. In the fifth iteration, when k is 1, the element of animals at 1 (“baboon”) starts with a “b”. It is removed from the list and inserted at index 5. The list would then be {“bear”, “zebra”, “bass”, “cat”, “koala”, “baboon”}. Finally, k decrements to 0 which is not greater than 0 so the loop terminates. . Q26 Print odd integers in 1D array but not even . Assume that the array arr has been defined and initialized as follows. . A single-line code that reads as follows: int, open square bracket, close square bracket, arr equals, forward slash, asterisk, initial values for the array, asterisk, forward slash, semicolon. . Which of the following will correctly print all of the odd integers contained in arr but none of the even integers contained in arr ? . My answer: E - for (int x : arr) if (arr[x] % 2 != 0) System.out.println(arr[x]); . Correct answer: A - for (int x : arr) if (x % 2 != 0) System.out.println(x); . Explanation: This algorithm uses an enhanced for loop to assign each element in arr to x. Using the modulus (%) operator to determine the remainder when dividing by 2, each value is checked to see if it is not even. If x is even, then x % 2 will be 0, since there is no remainder when you divide an even number by 2. If x is odd, then x % 2 will not equal 0, it will equal 1. . Q28 mystery method with int parameter description . . My answer: B - x will never be 1 at // Point C. . Correct answer: E - n will always be greater than 2 at // Point B. . Explanation: The while loop only iterates while n is greater than 2 and //Point B is in the body of the while loop prior to any change to the value of n. At this point, n will always be greater than 2. B is incorrect beucase if the value of n is 2 or less in the original call to the method mystery, the loop will be skipped and x will be 1 at //Point C. . Q29 Print values divisible by 4 using for loop . . My answer: D - for (int k = 1; k &lt;= 100; k = 4 * k) System.out.println(k); . Correct answer: E - for (int k = 4; k &lt;= 100; k = k + 4) System.out.println(k); . Explanation: The original code segment prints all values between 1 and 100 that are evenly divisible by 4. The following values are printed: 4, 8, 12, 16, 20, 24, 28, 32, 36, 40, 44, 48, 52, 56, 60, 64, 68, 72, 76, 80, 84, 88, 92, 96, and 100. Choice E shows these values can also be printed by having a for loop that has a loop control variable k that starts at 4, increments by 4, and terminates when k is greater than 100. D is inccorect because it will print 4, 16, 64, since k is assigned the value of k * 4 for each iteration. . Q33 Print sum after while loop . . My answer: C - 12 . Correct answer: E - nothing is printed due to an infinite loop . Explanation: Since k is never changed in the body of the while loop, it will always be 1 and less than 4. In a boolean expression with or (||) if one of the two expressions is true, the expression is true. This will cause an infinite loop. . Q38 Compound Boolean expression with variables x and y . . My answer: D - (y &gt; 10000 &amp;&amp; x &gt; 1000) | | (y &gt; 10000 &amp;&amp; x &lt; 1500) . Correct answer: A - (y &gt; 10000 | | x &gt; 1000) &amp;&amp; (y &gt; 10000 | | x &lt; 1500) . Explanation: The original expression evaluates to true when either y is greater than 10000 or x is between 1000 and 1500. If the value of y is greater than 10000, this equivalent expression will evaluate to true since it is used in both of the or (||) expressions. If y is not greater than 10000, the only way the equivalent expression can evaluate to true is if x is between 1000 and 1500. . Q39 recur method with int parameter . . My answer: B - 9 . Correct answer: D - 16 . Explanation: B is not right because 9 is the value that is passed in the first recursive call to recur. The call recur(27) returns the value of recur(recur(9)) since 27 is greater than 10. The call recur(9) returns 18, since 9 is less than or equal to 10. Therefore, recur(recur(9)) is recur(18). The call recur(18) returns recur(recur(6)) since 18 is greater than 10. The call recur(6) returns 12, since 6 is less than or equal to 10. Therefore, recur(recur(6)) is recur(12). The call recur(12) returns recur(recur(4)) since 12 is greater than 10. The call recur(4) returns 8, since 4 is less than or equal to 10. Therefore, recur(recur(4)) is recur(8). The call recur(8) returns 16, since 8 is less than or equal to 10. Therefore, recur(27)returns the value of 16. . Q40 whatsItDo with String parameter and substrings . My answer: A - WATC WAT WA W . Correct answer: C - W WA WAT WATC . Explanation: A is incorrect because this would be the output if the System.out.println(temp); line was before the recursive call to whatsItDo(temp); When the recursive call whatsItDo(temp); is executed, the current sequence of statements are paused. (C) The call whatsItDo(“WATCH”) assigns to temp a substring of “WATCH” starting at 0 and ending at 4 – 1 or 3, which is “WATC”. Next the call whatsItDo(“WATC”) is made. The call whatsItDo(“WATC”), sets its local temp to “WAT” and calls whatsItDo(“WAT”). The call whatsItDo(“WAT”), sets its local temp to “WA” and calls whatsItDo(“WA”). The call whatsItDo(“WA”), sets its local temp to “W” and calls whatsItDo(“W”). The call whatsItDo(“W”) reaches the base case and doesn’t do anything since the length of “W” is 1. Then we need to finish the call to whatsItDo(“WA”), which prints the value of its local temp, “W”. Then we need to finish the call to whatsItDo(“WAT”), which prints the value of its local temp, “WA”. Then we need to finish the call to whatsItDo(“WATC”), which prints the value of its local temp, “WAT”. Then we need to finish the call to whatsItDo(“WATCH”), which prints the value of its local temp, “WATC”. And the recursive calls are complete. .",
            "url": "https://lindaliu1202.github.io/lindaliu_blog/jupyter/2022/11/09/corrections.html",
            "relUrl": "/jupyter/2022/11/09/corrections.html",
            "date": " • Nov 9, 2022"
        }
        
    
  
    
        ,"post6": {
            "title": "N@tM Capture the Moment",
            "content": ". . . . .",
            "url": "https://lindaliu1202.github.io/lindaliu_blog/jupyter/2022/11/03/N@tM.html",
            "relUrl": "/jupyter/2022/11/03/N@tM.html",
            "date": " • Nov 3, 2022"
        }
        
    
  
    
        ,"post7": {
            "title": "Array Hack",
            "content": "Hack 2 Which of the following is FALSE about arrays . A. A java array is an object B. Length of array can be changed after creation of array C. Numerical data types of arrays are initialized to 0 to start . B . Hack 3 Create a function that takes in a list of integers and returns the list with the integers in ascending order. Print every element in this list . Example int[] myNumbers = new int[] {5, 3, 4, 1, 2}; arraySorter(myNumbers); Expected Output 1 2 3 4 5 . int[] myNumbers = new int[] {5, 3, 4, 1, 2}; for (int i = 0; i &lt; myNumbers.length; i++) { } . | myNumbers.sort(arraysorter); cannot find symbol symbol: variable arraysorter | System.out.print(arraysorter); cannot find symbol symbol: variable arraysorter . Hack 4 Given the following code segment, which of the following will cause an infinite loop? Assume that temp is an int variable initialized to be greater than zero and that a is an array of integers. . for ( int k = 0; k &lt; a.length; k++ ) { while ( a[ k ] &lt; temp ) { a[ k ] *= 2; } } . B . When a contains a value that is less than or equal to zero then multiplying that value by 2 will never make the result larger than temp (which was set to some value &gt; 0), so an infinite loop will occur. . 6.3 Enhanced for loop for Arrays . can only traverse in a forward direction | . for (dataType i: arrayName) { do something with i } .",
            "url": "https://lindaliu1202.github.io/lindaliu_blog/jupyter/2022/10/25/arrayhack.html",
            "relUrl": "/jupyter/2022/10/25/arrayhack.html",
            "date": " • Oct 25, 2022"
        }
        
    
  
    
        ,"post8": {
            "title": "Unit 3 Boolean Expressions and if Statements",
            "content": "2019 FRQ 1 A . Write the static method numberOfLeapYears, which returns the number of leap years between year1 and year2, inclusive. . public static int numberOfLeapYears (int year1, int year2){ //check IF year 1 is leap year or not, if not check year 1 + 1, and so on (for loop + if statement) //year 1 should be less than year 2 (condition) //then add up all the leap years (count) //isLeapYear(year) returns true if year is a leap year and false otherwise. int count = 0; //initialize count, count should be outside of the for loop for (int y = year1; y &lt;= year2; y++) { // for each year between year 1 and year 2 if (isLeapYear(y)) { //if y is leap year (using the isLeapYear() method) count++; //count plus 1 } } return count; //return the total number of leap years } . 2019 FRQ 1 B . Write the static method dayOfWeek, which returns the integer value representing the day of the week for the given date (month, day, year), where 0 denotes Sunday, 1 denotes Monday, ..., and 6 denotes Saturday. For example, 2019 began on a Tuesday, and January 5 is the fifth day of 2019. As a result, January 5, 2019, fell on a Saturday, and the method call dayOfWeek(1, 5, 2019) returns 6. . // returns the integer value representing the day of the week for the given date (month, day, year), where 0 denotes Sunday, 1 denotes Monday, ..., and 6denotes Saturday // two helper methods: firstDayOfYear(year), dayOfYear(month, day, year) public static int dayOfWeek (int month, int day, int year) { //remember to define data type int firstDay = firstDayOfYear(year); //return the int value representing the day of the week for the first day of year int nthDay = dayOfYear(month, day, year); //return n, where month, day, and year specify the nth day of the year int returnDay = (nthDay + firstDay - 1) % 7; //return based on a 0-indexed array instead of the 1-based list of days, gives us the right day of the week //% 7 at the end takes care of keeping the value within the bounds of the day of week index return returnDay; //return } . Quizziz Screenshot . . Conditional Exercises . 2) Write a Java program to solve quadratic equations (use if, else if and else). . import java.util.Scanner; // import scanner for use input public class Exercise2 { public static void main(String[] Strings) { Scanner input = new Scanner(System.in); System.out.print(&quot;Input a: &quot;); double a = input.nextDouble(); System.out.print(&quot;Input b: &quot;); double b = input.nextDouble(); System.out.print(&quot;Input c: &quot;); double c = input.nextDouble(); double result = b * b - 4.0 * a * c; // result the value under the square root if (result &gt; 0.0) { //if it is a positive number under the square root, continue with the rest of quadratic formula double r1 = (-b + Math.pow(result, 0.5)) / (2.0 * a); //The Math.pow() method returns the value of a base raised to a power. double r2 = (-b - Math.pow(result, 0.5)) / (2.0 * a); System.out.println(&quot;The roots are &quot; + r1 + &quot; and &quot; + r2); } else if (result == 0.0) { //if 0, -b +or- 0 over 2a double r1 = -b / (2.0 * a); System.out.println(&quot;The root is &quot; + r1); } else { //if negative number under square root, no solution System.out.println(&quot;The equation has no real roots.&quot;); } } } Exercise2.main(null); . Input a: . 4) Write a Java program that reads a floating-point number and prints &quot;zero&quot; if the number is zero. Otherwise, print &quot;positive&quot; or &quot;negative&quot;. Add &quot;small&quot; if the absolute value of the number is less than 1, or &quot;large&quot; if it exceeds 1,000,000. . import java.util.Scanner; public class Exercise4 { public static void main(String[] args) { Scanner in = new Scanner(System.in); System.out.print(&quot;Input value: &quot;); double input = in.nextDouble(); if (input &gt; 0) { if (input &lt; 1) { System.out.println(&quot;Positive small number&quot;); } else if (input &gt; 1000000) { System.out.println(&quot;Positive large number&quot;); } else { System.out.println(&quot;Positive number&quot;); } } else if (input &lt; 0) { if (Math.abs(input) &lt; 1) { System.out.println(&quot;Negative small number&quot;); } else if (Math.abs(input) &gt; 1000000) { System.out.println(&quot;Negative large number&quot;); } else { System.out.println(&quot;Negative number&quot;); } } else { System.out.println(&quot;Zero&quot;); } } } Exercise4.main(null); . 6) Write a Java program that reads in two floating-point numbers and tests whether they are the same up to three decimal places. . import java.util.Scanner; public class Exercise6 { public static void main(String[] args) { Scanner in = new Scanner(System.in); System.out.print(&quot;Input floating-point number: &quot;); double x = in.nextDouble(); System.out.print(&quot;Input floating-point another number: &quot;); double y = in.nextDouble(); x = Math.round(x * 1000); x = x / 1000; y = Math.round(y * 1000); y = y / 1000; if (x == y) { System.out.println(&quot;They are the same up to three decimal places&quot;); } else { System.out.println(&quot;They are different&quot;); } } } Exercise6.main(null); . The conditional exercises are really difficult for me. I would spent time understanding the code above as much as possible. .",
            "url": "https://lindaliu1202.github.io/lindaliu_blog/jupyter/2022/10/22/unit3hack.html",
            "relUrl": "/jupyter/2022/10/22/unit3hack.html",
            "date": " • Oct 22, 2022"
        }
        
    
  
    
        ,"post9": {
            "title": "Video - DevOps Engineer",
            "content": "Describe software and programming tools | Identify authoring tools (IDE’s, Docker, GitHub) used | Describe and/or show visuals of interactions and integration of programming languages, protocols, and data | within project. For instance, deployed systems of Docker Images, Nginx, DNS hosting the application. | Describe and/or illustrate key Web Applications, APIs, and dependency systems that will be required to complete this system (Diagram). | . Video Script . Hi I am Linda and I am the DevOps of our team, and i am responsible for deploying the website and ensuring the ability to do continuous updates, and help with backend development . Our website is successful running as a subdomain under nightkawkcodingsociety.com (showing our deployed website) . We have the backend restraurant api running in our website as for now (showing code and runtime) . in terms of deployment, i use ubuntu terminal as a local version of project for deploying and updating, such as making edit to the docker file, nginx configuration... (certbox - &quot;not secure&quot; - establish working https web application) (showing cding to repo, access docker file etc.) . Our team members are also able to update or make changes to the project through vscode, ubuntu terminal, and github. . (or they can make edit on Github repo directly, however, if doing that, other members need to, on terminal, kill the process, update code by doing git pull, force rebuild of docker container, and run docker-compose in order to keep the versions consistent and avoid conflict.) (not gonna be included in the video) . In order to understand more about deployment, me and divya made a diagram on Docker, (show the diagram we made and open ubuntu to show how does it connect to our own dockerfile...) . Video .",
            "url": "https://lindaliu1202.github.io/lindaliu_blog/jupyter/2022/10/21/videoscript.html",
            "relUrl": "/jupyter/2022/10/21/videoscript.html",
            "date": " • Oct 21, 2022"
        }
        
    
  
    
        ,"post10": {
            "title": "Unit 1 Primitives",
            "content": "Basic Java (1.1) . All code that runs must be in the main method (shown below) | To print something, use System.out.print(); and inside the parenthesis put text in quotes (String) To print with a new line, use System.out.println(); | . | To comment your code, use // for single line comments and /**/ for multiple lines (example will be shown below) It is important to describe how and why your code works, however dont describe obvious things | . | . public class Example { public static void main(String[] args) { System.out.print(&quot;Hello World&quot;); System.out.print(&quot; From Team Oops!&quot;); System.out.println(); //done to separate two different lines System.out.println(&quot;Welcome to our presentation!&quot;); System.out.print(&quot;We hope you learn something from it!&quot;); } } Example.main(null); . Hello World From Team Oops! Welcome to our presentation! We hope you learn something from it! . Hack 1.1 . Print your name and your team name in separate lines! . public class Printing { public static void main(String[] args) { System.out.println(&quot;Linda&quot;); System.out.println(&quot;Divya&quot;); System.out.println(&quot;Valshavi&quot;); System.out.println(&quot;Rebecca&quot;); } } Printing.main(null); . Linda Divya Valshavi Rebecca . List of Data Types (1.2) . Data types are different categories in which one can store various types of data. | The main Primitve data types are: Integer (int): used for whole numbers | Double (double): used for numbers with decimals | Boolean (boolean): used for true or false conditionals | . | For Primitive types, variables store actual data instead of reference | If the variable is declared final, it cannot be edited | A non Primitive type which is commonly used is String Stores text | . | . public class Example { public static void main(String[] args) { int Herbo = 10; double gasPrices = 7.99; final boolean Hot = true; String name = &quot;Team Oops is hot:&quot;; System.out.println(Herbo); System.out.println(gasPrices); System.out.println(name + Hot); // Hot = false; cannot assign a value to final variable Hot } } Example.main(null); . 10 7.99 Team Oops is hot:true . Hack 1.2 . Create variables for your biodata (name, age, underclassmen or not, height in feet) . public class Biodata { public static void main(String[] args) { String name = &quot;Linda&quot;; int age = 15; boolean underclassmen = false; int height = 163; //in cm } } Biodata.main(null); . Operators (1.3) . In order to perform mathmatical calculations on integers and doubles, you can use operators | Main ones are +, -, *, / These are what you expect | When dividing integers, it always rounds down because output must be an integer | When dividing by 0, will get the ArithemticException Error | . | Modulus is %, used to get remainder when two numbers are divided | . public class Math { public static void main(String[] args) { int number = 2; int number2 = 5; double number3 = 2.0; double number4 = 5.0; System.out.println(number+number2); System.out.println(number3+number4); System.out.println(number-number2); System.out.println(number3-number4); System.out.println(number * number2); System.out.println(number3 * number4); System.out.println(number/number2); System.out.println(number3/number4); System.out.println(number4 % number3); System.out.println(number2 % number); } } Math.main(null); . 7 7.0 -3 -3.0 10 10.0 0 0.4 1.0 1 . Hack 1.3 . Compute the remainder of 6 multiplied by 1234124 divided by 11345 minus 890809 plus 90800 (use order of operations) is divided by 980098, and store this in a variable called num (get an exact number as opposed to a whole number) | Divide num by 100 | Print num | . public class Num { public static void main(String[] args) { } } Num.main(null); . Assignment operators (1.4) . += adds value of a variabe to another variable and assigns total value to first variable | -= subtracts value of a variabe to another variable and assigns total value to first variable | *= multiplies value of a variabe to another variable and assigns total value to first variable | /= multiplies value of a variabe to another variable and assigns total value to first variable | %= takes the remainder of a variable with a second variable and assigns remainder to first variable | ++ increments a variable by 1, to incrememt by more change second plus to number which you want to incrememnt by | -- subracts a variable by 1, to incrememt by more change second plus to number which you want to subtract by | . Hack 1.4 . Create a code which performs mathmatical calculations with assignment operators! | . public class Operators { public static void main(String[] args) { int b = 0; System.out.println(b+=3); } } Operators.main(null); . 3 . Casting and Ranges (1.5) . Doubles and Integers can be converted to each other using (int) or (double) When converting from doubles to integers, will round down | . | Integers are 4 bytes of data, can store between Integer.MAX_VALUE and Integer.MIN_VALUE | . Casting . 1 / 3 - return 0 division with integers - truncate and throw away the part after the decimal point . 1.0 / 3 - return 0.33333333333333 a mixture of integers (int) and decimal (double) numbers, return a double result . if want to return a integer -&gt; casting . double can be rounded to the nearest integer by adding or subtracting .5 and casting with (int) using formulas . int nearestInt = (int)(number + 0.5); int nearestNegInt = (int)(negNumber – 0.5); . public class Cast { public static void main(String[] args) { double num = 10.5; int num2 = 100; int numInt = (int)num; double num2Double = (double)num2; System.out.println(num); System.out.println(num2); System.out.println(numInt); System.out.println(num2Double); System.out.println(Integer.MAX_VALUE); System.out.println(Integer.MIN_VALUE); } } Cast.main(null); . 10.5 100 10 100.0 2147483647 -2147483648 . Hack 1.5 . Convert 123456.123456 into an integer | Set 678901234567890 into an integer (what do you think will happen?) | . public class CastActivity { public static void main(String[] args) { double num = 123456.123456; int numInt = (int)num; System.out.println(numInt); } } CastActivity.main(null); . 123456 . int num2 = 678901234567890; System.out.println(num2); //interger number too large . | int num2 = 678901234567890; integer number too large . Code Example! . public class Main { public static void main (String[] args) { Scanner sc = new Scanner(System.in); System.out.println(&quot;What is your name?&quot;); String name = sc.next(); //string System.out.println(name); System.out.println(&quot;How many pizzas do you want to buy?&quot;); int pizzas = sc.nextInt(); //integer System.out.println(pizzas); System.out.println(&quot;Do you have the discount (true/false)?&quot;); boolean hasDiscount = sc.nextBoolean(); //boolean System.out.println(hasDiscount); double price; //double, defaults to 0 if (hasDiscount) { price = 1.20; } else { price = 2.10; } char firstChar = name.charAt(0); //character double finalPrice = price * pizzas * 1.08; // adding taxes System.out.println(&quot;Hi &quot; + firstChar + &quot;! You have to pay &quot; + (finalPrice) + &quot; dollars.&quot;); } } Main.main(null); .",
            "url": "https://lindaliu1202.github.io/lindaliu_blog/jupyter/2022/10/20/unit1.html",
            "relUrl": "/jupyter/2022/10/20/unit1.html",
            "date": " • Oct 20, 2022"
        }
        
    
  
    
        ,"post11": {
            "title": "Intersections of Business and STEM at Qualcomm (extra credit opportunity)",
            "content": "Sreeja Nair: . Tenet 1: stay curious. Her journey starts with her fascination about the scientific calculator and she wonders how it works and asks the teacher. However, the teacher can’t answer her question and tells her to go with an engineering major in college to figure it out. This curiosity and desire to question things to figure out how it works is what prompts Sreeja into the path of engineering. . Tenet 2: you can lead from any chair. When opportunity comes, don’t be afraid that you are not the best one to fit the position; instead, take the opportunity and most importantly learn from others (seniors/people with more experience). This learning experience will boost your confidence, and by taking that opportunity, more opportunities will come. That’s when Sreeja transitioned to product manager. She told us that when landing in a room with people who are more experienced than you, don&#39;t be scared and take any opportunity that is presented to you. This advice is very applicable to us students because we usually are not confident in our skills since we are still learning and is scared to be the one in lead (e.g. scrum master); however, when opportunity is presented in from of us, the more beneficial way is to take that opportunity and that we will be able to grow and learn and gain more opportunities. . Tenet 3: begin with the end in mind. Invention - creating something new for users. Innovation - adding something one to it, making it useful. Product manager’s job is to connect the dots between invention and innovation, coordinate different teams that hold the pieces, talk to customers, collect their requirements, identify product position, pricing, and etc. . (A good question that Collin asked is that in CSA, we are subscribing to follow processes such as SCRUM, and why? The benefit of subscribing to these processes is to improve efficiency and let folks understand and do things in a certain way. At the same time, it is good to have this healthy skepticism of questioning why am i doing this, is this the best thing to do, and remember that, while subscribing to these processes, there is always room for improvements. ) . . Lindsey Kostas: . Having a hazy long term goal, loving every subject in school, not sure what major to be in. I feel like her story is more relatable to most of us students, who are still not sure about the future major or career to be in. She often asks herself questions such as is she enjoying the things that she is doing, and she is learning. Later on, she found what she likes, which is economics, and she liked it and saw the practical value of it, so she decided to take more econ classes an major in economics. She also understands the practical value of being exposed to computer science, but doesn&#39;t have any opportunities. After having the chance to take intro to java at stanford, she likes it because she likes creating things. Since economics is theoretical grounding, she feels like there is a gap between theoretical knowledge and practical application. And computer science can take theories and create something and transfer theories into a useful model, and that’s the reason why she chose to get a master degree in computer science even though she is still not sure to become an economist or computer scientist since she feel need for more learning.This is Lindsey’s story. . What advice and lessons she gave us is that, as high school students, so much learning happens, including going to office hours, going to teacher’s office, and doing group projects. It is especially really useful and beneficial to learn how to perform in a team with people and people that you have never worked with before. Not just learning and focusing entirely on technical stuff but also learning how to work with other people is what is most valuable about doing group projects. Another thing that i found really important is that advice of don’t just sit and watch, but have an idea, speak your mind, give perspectives/suggestions, and that’s how you provide your value to the group. . . In terms of internship, Lindsey’s advice on how to stand out is that when in an interview, treat it more like a conversation, and ask questions. Not just answering questions, but also thinking and asking questions, which creates a more compelling interview because you are showing perspective and your value. . In terms of failure, the advice they give is to not think of it as a failure. Learning from mistakes and avoiding making the same mistakes again is more valuable. Also keep in mind that no one will care about your failure. Successful people are not always successful. When making mistakes or facing failures: reflect and see what you can do better, make new mistakes, share your mistakes with others so that others won’t make the same mistakes. When receiving feedback, having the right attitude, taking it positively, and learning from feedback. (This is where I need to improve on because sometimes I get emotional when receiving feedback, I should have the right attitude and take the feedback positively and learn and improve from it.) .",
            "url": "https://lindaliu1202.github.io/lindaliu_blog/jupyter/2022/10/18/extracredit.html",
            "relUrl": "/jupyter/2022/10/18/extracredit.html",
            "date": " • Oct 18, 2022"
        }
        
    
  
    
        ,"post12": {
            "title": "Writing Classes 5.6 - 5.7",
            "content": "5.6 Writing Methods . Procedural Abstraction allows us to name a block of code as a method and call it whenever we need it, abstracting away the details of how it works | Benefits: organize our code by function | reduce its complexity | reduce the repetition of code reuse code by putting it in a method and calling it whenever needed. | . | helps with debugging and maintenance changes to that block of code only need to happen in one place | . | . | . | . When you see repeated code, that is a signal for you to make a new method! | . Three steps to creating and calling a method: . 1) Object of the Class: Declare an object of your class in the main method or from outside the class. . // Step 1: declare an object in main or from outside the class Classname objectName = new Classname(); . | Classname objectName = new Classname(); cannot find symbol symbol: class Classname | Classname objectName = new Classname(); cannot find symbol symbol: class Classname . 2) Method Call: whenever you want to use the method, call objectName.methodName(); . // Step 2: call the object&#39;s method objectName.methodName(); . 3) Method Definition: write the method’s header and body code like below: . // Step 3: Define the method in the class // method header public void methodName() { // method body for the code } . Identify Repetited Code . public static void main(String args[]) { System.out.print(&quot;Monday&quot;); System.out.println (&quot;Code code code!&quot;); System.out.print(&quot;Tuesday&quot;); System.out.println (&quot;Code code code!&quot;); System.out.print(&quot;Wednesday&quot;); System.out.println (&quot;Code code code!&quot;); System.out.print(&quot;Thursday&quot;); System.out.println (&quot;Code code code!&quot;); System.out.print(&quot;Friday&quot;); System.out.println (&quot;Code code code!&quot;); } . repetited line: . System.out.println (&quot;Code code code!&quot;) . public void code(){ . } . Parameters . We can make methods even more powerful and more abstract by giving them parameters for data that they need to do their job. . class ClassName { // static variable public static type variableName; // static method public static returnType methodName(parameters) { // implementation not shown } } // To call a static method or variable, use the Class Name System.out.println(ClassName.staticVariable); ClassName.staticMethod(); . Static methods Static variables . include the keyword static before their name in the header or declaration, can be public or private | include the keyword static before their name in the header or declaration, can be public or private | . are associated with the class, not objects of the class | belong to the class, with all objects of a class sharing a single static variable | . cannot access or change the values of instance variables, but they can access or change the values of static variables | used with the class name and the dot operator, since they are associated with a class, not objects of a class | . cannot call non-static methods | | . Static methods and variables include the keyword static before their name in the header or declaration. They can be public or private. . Static variables belong to the class, with all objects of a class sharing a single static variable. . Static methods are associated with the class, not objects of the class. . Static variables are used with the class name and the dot operator, since they are associated with a class, not objects of a class. . Static methods cannot access or change the values of instance variables, but they can access or change the values of static variables. . Static methods cannot call non-static methods. . Practice . Consider the following class, which uses the instance variable dollars to represent the money in a wallet in dollars. . The putMoneyInWallet method is intended to increase the dollars in the wallet by the parameter amount and then return the updated dollars in the wallet. Which of the following code segments should replace missing code so that the putMoneyInWallet method will work as intended? . public class Wallet { private double dollars; public double putMoneyInWallet(int amount) { /* missing code */ } } . A. amount += dollars; return dollars; . B. dollars = amount; return amount; . C. dollars += amount; return dollars; . D. dollars = dollars + amount; return amount; . E. amount = dollars + amount; return dollars; . public class Song { /** Verse - prints out a verse of the song * @param number - a String like &quot;one&quot;, &quot;two&quot;, etc. * @param rhyme - a String like &quot;thumb&quot;, &quot;shoe&quot;, etc. */ public void verse(String number, String rhyme) { System.out.println(&quot;This old man, he played &quot; + number); System.out.println(&quot;He played knick knack on my &quot; + rhyme); } // The chorus method public void chorus() { System.out.println(&quot;With a knick knack paddy whack, give a dog a bone.&quot;); System.out.println(&quot;This old man came rolling home.&quot;); } public static void main(String args[]) { Song mySong = new Song(); mySong.verse(&quot;one&quot;, &quot;thumb&quot;); mySong.chorus(); mySong.verse(&quot;two&quot;, &quot;shoe&quot;); mySong.chorus(); } } Song.main(null); . This old man, he played one He played knick knack on my thumb With a knick knack paddy whack, give a dog a bone. This old man came rolling home. This old man, he played two He played knick knack on my shoe With a knick knack paddy whack, give a dog a bone. This old man came rolling home. . //The Old Man Song public static void main(String args[]) { System.out.println(&quot;This old man, he played one.&quot;); System.out.println(&quot;He played knick knack on my thumb. &quot;); System.out.println(&quot;With a knick knack paddy whack, give a dog a bone.&quot;); System.out.println(&quot;This old man came rolling home.&quot;); System.out.println(&quot;This old man, he played two.&quot;); System.out.println(&quot;He played knick knack on my shoe. &quot;); System.out.println(&quot;With a knick knack paddy whack, give a dog a bone.&quot;); System.out.println(&quot;This old man came rolling home.&quot;); } . //chorus() method definition public void chorus() { System.out.println(&quot;With a knick knack paddy whack, give a dog a bone.&quot;); System.out.println(&quot;This old man came rolling home.&quot;); } . //chorus() method call mySong.chorus(); . . Consider the class Temperature below which has a static variable. What is the output of the main method below? . public class Temperature { private double temperature; public static double maxTemp = 0; public Temperature(double t) { temperature = t; if (t &gt; maxTemp) maxTemp = t; } public static void main(String[] args) { Temperature t1 = new Temperature(75); Temperature t2 = new Temperature(100); Temperature t3 = new Temperature(65); System.out.println(&quot;Max Temp: &quot; + Temperature.maxTemp); } } . A. Max Temp: 0 . B. There is a compiler error because the static variable maxTemp cannot be used inside a non-static constructor. . C. Max Temp: 100 . D. Max Temp: 75 . E. Max Temp: 65 . hints: . maxTemp is changed in each call to the Temperature() constructor . Non-static methods and constructors can use any instance or static variables in the class .",
            "url": "https://lindaliu1202.github.io/lindaliu_blog/jupyter/2022/10/17/5.6_5.7.html",
            "relUrl": "/jupyter/2022/10/17/5.6_5.7.html",
            "date": " • Oct 17, 2022"
        }
        
    
  
    
        ,"post13": {
            "title": "Using Objects",
            "content": "What are Objects and Classes? . A class defines a new data type (a classification). It is the formal implementation, or blueprint, of the attributes and behaviors of the objects of that class. | An object is a specific instance of a class with defined attributes. Objects are declared as variables of a class type. | An attribute or instance variable is data the object knows about itself. For example a turtle object knows the direction it is facing or its color. | A behavior or method is something that an object can do. For example a turtle object can go forward 100 pixels. | . Creating and Initializing Objects: Constructors . Each class has constructors like World() and Turtle(habitat) which are used to initialize the attributes in a newly created object. | A new object is created with the new keyword followed by the class name (new Class()). When this code executes, it creates a new object of the specified class and calls a constructor, which has the same name as the class. new World() creates and initializes a new object of the World class, and new Turtle(habitat) creates and initializes a new Turtle object in the World habitat. | . | . // To create a new object and call a constructor write: // ClassName variableName = new ClassName(parameters); World habitat = new World(); // create a new World object Turtle t = new Turtle(habitat); // create a new Turtle object . Constructors initialize the attributes in newly created objects. They have the same name as the class. | A constructor signature is the constructor name followed by the parameter list which is a list of the types of the parameters and the variable names used to refer to them in the constructor. | Overloading is when there is more than one constructor. They must differ in the number, type, or order of parameters. | New is a keyword that is used to create a new object of a class. The syntax is new ClassName(). It creates a new object of the specified class and calls a constructor. | A no-argument constructor is a constructor that doesn’t take any passed in values (arguments). | Parameters allow values to be passed to the constructor to initialize the newly created object’s attributes. | The parameter list, in the header of a constructor, is a list of the type of the value being passed and a variable name. These variables are called the formal parameters. | Actual parameters are the values being passed to a constructor. The formal parameters are set to a copy of the value of the actual parameters. | Formal parameters are the specification of the parameters in the constructor header. In Java this is a list of the type and name for each parameter (World(int width, int height). | Call by value means that when you pass a value to a constructor or method it passes a copy of the value.- | .",
            "url": "https://lindaliu1202.github.io/lindaliu_blog/jupyter/2022/10/16/usingObjects2.html",
            "relUrl": "/jupyter/2022/10/16/usingObjects2.html",
            "date": " • Oct 16, 2022"
        }
        
    
  
    
        ,"post14": {
            "title": "Primitives",
            "content": "Primitve Types on CSA Exam . int - which store integers (numbers like 3, -76, 20393) | double - which store floating point numbers (decimal numbers like 6.3 -0.9, and 60293.93032) | boolean - which store Boolean values (either true or false). | . Declaring Variables in Java . To create(declare) a variable, you must tell Java its data type and its name. have to tell Java the type of the variable because Java needs to know how many bits to use and how to represent the value | integer - 32 bits of memory | double - 64 bits | boolean - one bit | . | . Example: int score; score = 4; . (initialize) int score = 4; . Assignment Statements . Assignment statements initialize or change the value stored in a variable using the assignment operator =. | Instead of saying equals for the = in an assignment statement, say “gets” or “is assigned” to remember that the variable gets or is assigned the value on the right. | Example: score = (10 * points) + 5 score - variable | = is assigned to | (10 * points) + 5 - expression | . | . Operators . Java uses the operator == to test if the value on the left is equal to the value on the right and != to test if two items are not equal. | Use == and != only with int values and not doubles because double values are an approximation and 3.3333 will not equal 3.3334 even though they are very close. | Don’t get one equal sign = confused with two equal signs ==. . = - assign a value to a variable | == - test a variable to see if it is a certain value and that returns true or false as you’ll see below | . | An arithmetic operation that uses two int values will evaluate to an int value. With integer division, any decimal part in the result will be thrown away. . | An arithmetic operation that uses at least one double value will evaluate to a double value. | During evaluation, operands are associated with operators according to operator precedence to determine how they are grouped. (*, /, % have precedence over + and -, unless parentheses are used to group those.) | . Compound Assignment Operators . Compound assignment operators are shortcuts that do a math operation and assignment in one step | The most common shortcut operator ++, the plus-plus or increment operator, is used to add 1 to the current value; x++ is the same as x += 1 and the same as x = x + 1 | . Casting and Ranges of Variables . type casting is used to convert variable values from one type to another | Situation to use casting: If you have integers and you want a double result from some mathematical operation cast one of the integers to a double using (double) as shown above. | . int nearestInt = (int)(number + 0.5); . int nearestNegInt = (int)(negNumber – 0.5); . Common Mistakes . forgetting that Java is case sensitive - myScore is not the same as myscore. | forgetting to specify the type when declaring a variable (using name = value; instead of type name = value;) | using a variable name, but never declaring the variable. | using the wrong name for the variable. For example calling it studentTotal when you declare it, but later calling it total. | using the wrong type for a variable. Don’t forget that using integer types in calculations will give an integer result. So either cast one integer value to double or use a double variable if you want the fractional part (the part after the decimal point). | using == to compare double values. Remember that double values are often an approximation. You might want to test if the absolute value of the difference between the two values is less than some amount instead. | assuming that some value like 0 will be smaller than other int values. Remember that int values can be negative as well. If you want to set a value to the smallest possible int values use Integer.MIN_VALUE. | .",
            "url": "https://lindaliu1202.github.io/lindaliu_blog/jupyter/2022/10/16/primitives2.html",
            "relUrl": "/jupyter/2022/10/16/primitives2.html",
            "date": " • Oct 16, 2022"
        }
        
    
  
    
        ,"post15": {
            "title": "Create a interactive quiz using java",
            "content": "public class Question { //two attributes String prompt; String answer; //initialize method to initialize the object(give object intial value) public Question(String prompt, String answer) { //accepting input this.prompt = prompt; this.answer = answer; } } . import java.util.Scanner; public class App{ public static void main(String [] args) { String q1 = &quot;What is 1+1? n&quot; + &quot;(a)1 n(B)2 n(c)3 n&quot; ; String q2 = &quot;What is 2+1? n&quot; + &quot;(a)0 n(B)2 n(c)3 n&quot; ; Question [] questions = { //create an array of question new Question(q1, &quot;b&quot;), //q1 - prompt; a - answer new Question(q2, &quot;c&quot;) }; takeTest(questions); //call the method } public static void takeTest(Question [] questions) { //accepting a parameter that is an array of question int score = 0; Scanner keyboardInput = new Scanner (System.in); //be able to get input from user for(int i = 0; 1 &lt; questions.length; i++) { //print out question from array that we are looping through System.out.println(questions[i].prompt); //in each interation through this loop, access a different question&#39;s prompt String answer = keyboardInput.nextLine(); //create a variable to store user input as answer //check if the answer is right if(answer.equals(questions[1].answer)) { //compare the user&#39;s answer to the correct answer score++; } } System.out.println(&quot;You got &quot; + score + &quot;/&quot; + questions.length); } } // Static driver/tester method static public void main(String[] args) { new App(); // starting App object } App.main(null); . What is 1+1? (a)1 (B)2 (c)3 What is 2+1? (a)0 (B)2 (c)3 . java.lang.ArrayIndexOutOfBoundsException: Index 2 out of bounds for length 2 at App.takeTest(#14:25) at App.main(#14:15) at .(#16:1) .",
            "url": "https://lindaliu1202.github.io/lindaliu_blog/2022/10/13/java_quiz.html",
            "relUrl": "/2022/10/13/java_quiz.html",
            "date": " • Oct 13, 2022"
        }
        
    
  
    
        ,"post16": {
            "title": "Unit 4 Iteration",
            "content": "4.1 While Loops (2.B, 3.C) . Repeats lines of code until a certain condition evaluates to false | . While loops consist of 2 portions: the boolean expression and the brackets which store the looping code inside. . while (condition) { ... } . | ... illegal start of expression . The boolean expression is checked before the loop is started and every time the loop ends and is about to start anew. Usually, inside the loop something is done that slightly changes the conditions for the boolean expression until it reads false and ends. In the example below, the condition is x &gt; 0, meaning that x has to be changed for the loop to stop. Inside the loop, x is decremented by 1 every time, changing the conditions over and over again until it finally returns false and terminates the while loop. . int x = 5; // The boolean expression in this case is x &gt; 0 while (x &gt; 0) { System.out.println(x); x--; } . 5 4 3 2 1 . One of the most basic applications of while loops is its ability to iterate over numerous elements. One such example would be summing up the numbers in an array: . int[] array = {3, 7, 0, 2, 4, 5, 9, 1, 3, 6, 3}; int total = 0; int i = 0; while (i &lt; array.length) { total += array[i]; i++; } System.out.println(total); . 43 . One unique application of while loops lie in infinite while loops, loops that run over and over again permanently. This is usually accomplished by setting the boolean condition to be true at all times. The only way to stop these loops are to use a break command, which ends the loop regardless of the conditions present. . This can be used for various things, like having a running process at all times or constantly taking in input from the user, like the example below: . import java.util.Scanner; Scanner input = new Scanner(System.in); String choice; while (true) { System.out.println(&quot;Would you like to continue: &quot;); choice = input.nextLine(); if (choice.equals(&quot;No&quot;)) { break; } } . Would you like to continue: Would you like to continue: Would you like to continue: . Hacks . Say you have a company that makes a profit of $5,450,000 this year. Every year, the company has a profit increase of 5%. Determine how many years it would take to make a profit of at least $30,000,000 using a while loop. . public class WhileLoops { public static void main(String[] args) { int profit = 5450000; int i = 0; while( profit &lt; 30000000) { profit += profit * (1 + 0.05 * i); i++; } System.out.println(i); } } WhileLoops.main(null); . 4.2 For Loops . One of the most tested concepts in the APCSA exam | Skills 3.C, 4.C, and 5.C | . Three Parts of a For Loop . Initialization of a variable | Test condition | . for (initialize; test condition; change) { loop body } . Example . for (int x = 1; x &lt;= 5; x++) { System.out.println(x); } . 1 2 3 4 5 . Control Flow Diagram . The code in the initialization area is executed only one time before the loop begins | the test condition is checked each time through the loop and the loop continues as long as the condition is true | the loop control variable change is done at the end of each execution of the body of the loop | When the loop condition is false, execution will continue at the next statement after the body of the loop. | . Hacks . - Change the code above to iterate instead from 1-5 to 10-15. (Print numbers 10-15) . - Convert 10 numbers of your choice from two temperature units (F to C, C to F, C to K) . public class ForLoops { public static void main(String[] args) { for (int x = 10; x &lt;= 15; x++) { System.out.println(x); } } } ForLoops.main(null); . 4.3 Loops and Strings . Strings can also be manipulated through the use of iteration. Strings can actually be thought of as an array of chars, so each char can also be manipulated as well! . String name = &quot;CodeCodeCode&quot;; for (int i = 0; i &lt; name.length(); i+=2) { System.out.println(name.substring(i,i+2)); } . Co de Co de Co de . 4.4 Nested Iteration . Nested iteration is where there is a loop within a loop. It&#39;s kind of similar to the nested conditional that we learned yesterday in syntax. . A typical usage of nested looping is for two dimensions, like getting the pixel value of each pixel in an image across the columns and rows of pixels. Or, it can be used to print across these rows and columns to display some text . A very common nested iteration is the use of nested for loops, as they are concise enough to be used within each other without getting confused. Here is an example of code that uses nested for loops: . for (int row = 0; row &lt; 5; row ++) { for (int column = 0; column &lt; 4; column++) { System.out.print(&#39;*&#39;); } System.out.println(); } . **** **** **** **** **** . For Each Loops . What is a for each loop? . As the name suggests, for-each loops are similar to for loops. In Java, the for-each loop is used to iterate through elements of arrays and collections (like ArrayList). It is also known as the enhanced for loop. . Here is the syntax for a for-each loop: . for(dataType item : array) { ... } . includes: . array: an array or collection | item: each value in an array or collection | dataType: specify the type of data in the array (int) | . Example . public class ForEachLoops { public static void main(String[] args) { // create an array int[] data = {2, 10, 5, 12}; // for each loop for (int number: data) { System.out.println(number); } } } . Output: . 2 10 5 12 . For each iteration, the for-each loop takes each element of the collection and stores it in a loop variable. Thus, it executes the code written in the body of the loop for each element of the array or collection. . Most importantly, the traversal happens until the last element of the array or collection. No indexing is involved . Pros: . makes code easier to read and understand | eliminates possible coding mistakes | . Cons: . The drawback of the enhanced for loop (for-each loop) is that it cannot traverse the elements in reverse order. In the for each loop you do not have the option to skip any element because it does not work on an index basis. Moreover, you cannot traverse the odd or even elements only. | limited variability to the collection | situational | . Hacks . Could I use a for-each loop to print out 4 of the 5 elements of an array only? . Write a for-each loop that adds up all the values of the array (sum): . int numbers[] = {2, 5, 7, 12}; int sum = 9; for (int num: numbers) { sum += num; } System.out.println(sum); . 35 . Final Hacks/HOMEWORK . Try to write a caesar cipher program that shifts each letter in a message 3 letters forward. Use any of the methods you learned today. Use it to decode the 3 messages we&#39;ve given you! . public class CaesarCipher { String[] letters = {&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;, &quot;e&quot;, &quot;f&quot;, &quot;g&quot;, &quot;h&quot;, &quot;i&quot;, &quot;j&quot;, &quot;k&quot;, &quot;l&quot;, &quot;m&quot;, &quot;n&quot;, &quot;o&quot;, &quot;p&quot;, &quot;q&quot;, &quot;r&quot;, &quot;s&quot;, &quot;t&quot;, &quot;u&quot;, &quot;v&quot;, &quot;w&quot;, &quot;x&quot;, &quot;y&quot;, &quot;z&quot;}; String[] capitalLetters = {&quot;A&quot;, &quot;B&quot;, &quot;C&quot;, &quot;D&quot;, &quot;E&quot;, &quot;F&quot;, &quot;G&quot;, &quot;H&quot;, &quot;I&quot;, &quot;J&quot;, &quot;K&quot;, &quot;L&quot;, &quot;M&quot;, &quot;N&quot;, &quot;O&quot;, &quot;P&quot;, &quot;Q&quot;, &quot;R&quot;, &quot;S&quot;, &quot;T&quot;, &quot;U&quot;, &quot;V&quot;, &quot;W&quot;, &quot;X&quot;, &quot;Y&quot;, &quot;Z&quot;}; static String message1 = &quot;Kfzb gly!&quot;; static String message2 = &quot;zlab zlab zlab&quot;; static String message3 = &quot;prmbozxifcoxdfifpqfzbumfxifalzflrp&quot;; public static void main(String[] args) { CaesarCipher decode = new CaesarCipher(message1); CaesarCipher decode2 = new CaesarCipher(message2); CaesarCipher decode3 = new CaesarCipher(message3); } String decodeMessage = &quot;&quot;; public CaesarCipher(String message) { for (int i=0; i &lt; message.length(); i++){ decodeMessage = message.substring(i, i+1); if (decodeMessage.equals(&quot; &quot;)) { System.out.print(&quot; &quot;); } if (decodeMessage.equals(&quot;!&quot;)) { System.out.print(&quot;!&quot;); } for (int j = 0; j &lt; letters.length; j++) { if (decodeMessage.equals(letters[j])) { System.out.print(letters[(j+3)%26]); } if (decodeMessage.equals(capitalLetters[j])) { System.out.print(capitalLetters[(j+3)%26]); } } } System.out.println(&quot;&quot;); } } CaesarCipher.main(null); . Nice job! code code code supercalifragilisticexpialidocious .",
            "url": "https://lindaliu1202.github.io/lindaliu_blog/jupyter/2022/10/10/unit4.html",
            "relUrl": "/jupyter/2022/10/10/unit4.html",
            "date": " • Oct 10, 2022"
        }
        
    
  
    
        ,"post17": {
            "title": "List and ArrayLists",
            "content": "List is an interface, and the instances of List can be created by implementing various classes. | ArrayList class is used to create a dynamic array that contains objects. | . Travel Places Example . place.add | place.remove | place.get() | place.size() | place.set() | . // Importing all utility classes import java.util.*; // Main class public class places { // Main driver method public static void main() { // Creating an object of List class // Declaring an object of String type with // reference to ArrayList class // Type safe list ArrayList&lt;String&gt; place = new ArrayList&lt;String&gt;(); //place - object, &lt;String&gt; - type // Adding elements using add() method // Custom input elements place.add(&quot;New York&quot;); place.add(&quot;Hawii&quot;); place.add(&quot;Los Angeles&quot;); place.add(&quot;Korea&quot;); // Print and display the elements in // ArrayList class object System.out.println(&quot;a list of places to travel: &quot; + place); //remove element of index 1 place.remove(1); System.out.println(&quot;a lists of places to travel after traveled to Hawii: &quot; + place); //print index 1 of the arraylist with Hawii removed System.out.println(&quot;where do you want to travel to next? &quot; + place.get(1)); //new index 1 is Los Angeles //print the size of the arraylist System.out.println(&quot;numbers of places that you are going to travel to: &quot; + place.size()); //change index 1 to Japan place.set(1, &quot;Japan&quot;); System.out.println(&quot;changing Los Angeles to Japan: &quot; + place); } } places.main(); . a list of places to travel: [New York, Hawii, Los Angeles, Korea] a lists of places to travel after traveled to Hawii: [New York, Los Angeles, Korea] where do you want to travel to next? Los Angeles numbers of places that you are going to travel to: 3 changing Los Angeles to Japan: [New York, Japan, Korea] . Some Things to Know about ArrayList . ArrayList is basically a part of the collection framework and is present in java.util package. | . // Importing all utility classes import java.util.*; . ArrayList can not be used for primitive types, like int, char, etc. We need a wrapper class for such cases. Interger for int, Long for long, Boolean for boolean, etc. | Wrapper classes provide a way to use primitive data types (int, boolean, etc..) as objects. | . | . Difference between ArrayList and Array . ArrayList in Java is used to store dynamically sized collection of elements (more flexible). | . Array ArrayList . It can be single-dimensional or multidimensional | It can only be single-dimensional | . It is static and of fixed length | It is dynamic and can be increased or decreased in size when required | . An array can hold primitives and objects both in Java | ArrayList can only hold objects, not primitives (wrapper classes) | . Through the length keyword, we can determine the total size of an array | Through the size() method, we can determine the size of an ArrayList | . It is faster than ArrayList due to its static behaviour | It is slower as compared to the Array due to its dynamic behaviour | . Difference between ArrayList and List . List ArrayList . It is an interface | It is class | . It creates a list of objects that can be accessed by the individual index number | It creates a dynamic array that can be expanded when needed | . It extends the collection framework. | It extends AbstractList class and implements the List interface | . It can not be instantiated | It can be instantiate | . Interface? Class? AbstractList class? . Here is an visual showing the relationship: . . Angle Bracket &lt;&gt; in Java . used to define Generics Generic is a way to parameterize a class, method, or interface | // To create an instance of generic class BaseType &lt;Type&gt; obj = new BaseType &lt;Type&gt;() . | . | angle bracket(diamond syntax) takes a generic type in the definition and any class as a parameter during the calling | to allow type (Integer, String, … etc and user-defined types) to be a parameter to methods, classes, and interfaces | . Two ArrayLists (&lt; String &gt; &lt; Integer &gt;) . import java.util.*; public class places&lt;T&gt; { public static void main() { // arraylist &lt;String&gt; ArrayList&lt;String&gt; place = new ArrayList&lt;String&gt;(); //place - object, &lt;String&gt; - type place.add(&quot;New York&quot;); place.add(&quot;Hawii&quot;); place.add(&quot;Los Angeles&quot;); place.add(&quot;Korea&quot;); System.out.println(&quot;a list of places to travel: &quot; + place); // new arraylist &lt;Integer&gt; ArrayList&lt;Integer&gt; placeNumber = new ArrayList&lt;Integer&gt;(); placeNumber.add(30); placeNumber.add(14); placeNumber.add(3); System.out.println(&quot;how many possible days do you want to travel for: &quot; + placeNumber); System.out.println(&quot;how many days you plan to stay in Korea for: &quot; + placeNumber.get(1)); } } places.main(); . a list of places to travel: [New York, Hawii, Los Angeles, Korea] how many possible days do you want to travel for: [30, 14, 3] how many days you plan to stay in Korea for: 14 . helpful websites/videos to help with understanding . arraylist: https://medium.com/javarevisited/how-to-work-with-arraylists-in-java-lets-deep-dive-f1911d261358 | array vs arraylist: https://www.youtube.com/watch?v=NbYgm0r7u6o | angle bracket in java: https://www.geeksforgeeks.org/angle-bracket-in-java-with-examples/ | generics in java: https://www.geeksforgeeks.org/generics-in-java/ | interating over arraylist in java https://www.geeksforgeeks.org/iterating-arraylists-java/ | https://beginnersbook.com/2013/12/how-to-loop-arraylist-in-java/ | . | .",
            "url": "https://lindaliu1202.github.io/lindaliu_blog/jupyter/2022/10/09/arraylist.html",
            "relUrl": "/jupyter/2022/10/09/arraylist.html",
            "date": " • Oct 9, 2022"
        }
        
    
  
    
        ,"post18": {
            "title": "Docker Diagram",
            "content": "Mindmap about Docker . what are docker image | docker container | port mapping | docker-compose | dockerfile | . | . . Some resources that I used: . https://nighthawkcoders.github.io/APCSA//techtalk/deploy | https://aws.amazon.com/docker/ | https://www.geeksforgeeks.org/difference-between-docker-image-and-container/ | https://www.youtube.com/watch?v=8vyMVzRBPdI&amp;t=113s | https://shivam1410.medium.com/dockerfile-and-docker-compose-d1bff2de4bf3 | . . . Process of making the Docker diagram with Divya . . . . . Final Diagram: . .",
            "url": "https://lindaliu1202.github.io/lindaliu_blog/jupyter/2022/10/08/dockerDiagram.html",
            "relUrl": "/jupyter/2022/10/08/dockerDiagram.html",
            "date": " • Oct 8, 2022"
        }
        
    
  
    
        ,"post19": {
            "title": "POJO, JPA, API, FE",
            "content": "Write the POJO with lambok (original) . import lombok.AllArgsConstructor; import lombok.Data; import lombok.NoArgsConstructor; import javax.persistence.*; @Data // Annotations to simplify writing code (ie constructors, setters) @NoArgsConstructor @AllArgsConstructor @Entity // Annotation to simplify creating an entity, which is a lightweight persistence domain object. Typically, an entity represents a table in a relational database, and each entity instance corresponds to a row in that table. public class Jokes { @Id @GeneratedValue(strategy = GenerationType.AUTO) private Long id; // Unique identifier @Column(unique=true) private String joke; // The Joke private int haha; // Store joke likes private int boohoo; // Store joke jeers } . The @GeneratedValue annotation is to configure the way of increment of the specified column(field). | GenerationType.AUTO This GenerationType indicates that the persistence provider should automatically pick an appropriate strategy for the particular database. This is the default GenerationType, i.e. if we just use @GeneratedValue annotation then this value of GenerationType will be used. | The @Id annotation is one of the two mandatory annotations needed when creating an entity with JPA. The other one being @Entity. @Id does two things for us: signifies that this field will be the unique identifier for this class when mapped to a database table | the presence of @Id lets the persistence layer know that all other fields within this class are to be mapped to database rows | . | . Writing Setters and Getters (write POJO without lambok) . import lombok.AllArgsConstructor; import lombok.Data; import lombok.NoArgsConstructor; import javax.persistence.*; @Data // Annotations to simplify writing code (ie constructors, setters) @NoArgsConstructor @AllArgsConstructor @Entity // Annotation to simplify creating an entity, which is a lightweight persistence domain object. Typically, an entity represents a table in a relational database, and each entity instance corresponds to a row in that table. public class Jokes { //@Id @GeneratedValue(strategy = GenerationType.AUTO) private Long id; // Unique identifier private Long id; public Long getId() { return id; } public void setId(Long id) { this.id = id; } //@Column(unique=true) private String joke; // The Joke private String joke; public String getJoke() { return joke; } public void setJoke(String id) { this.joke = joke; } // private int haha; // Store joke likes private int haha; public int getHaha() { return haha; } public void setHaha(int id) { this.haha = haha; } //private int boohoo; // Store joke jeers private int boohoo public int getHaha() { return haha; } public void setHaha(int id) { this.haha = haha; } } .",
            "url": "https://lindaliu1202.github.io/lindaliu_blog/jupyter/2022/10/07/pojo.html",
            "relUrl": "/jupyter/2022/10/07/pojo.html",
            "date": " • Oct 7, 2022"
        }
        
    
  
    
        ,"post20": {
            "title": "Flights Api",
            "content": ". An HttpClient can be used to send requests and retrieve their responses | An HttpRequest sets up header and body to API provider | An HttpResponse is returned as a result of sending an HttpRequest | . import java.net.URI; import java.net.http.HttpClient; import java.net.http.HttpRequest; import java.net.http.HttpResponse; HttpRequest request = HttpRequest.newBuilder() .uri(URI.create(&quot;https://flight-radar1.p.rapidapi.com/aircrafts/list&quot;)) .header(&quot;x-rapidapi-key&quot;, &quot;9e3f40a0cemshcced0bdaa85f0c0p1e3309jsnbb4748bd1d8c&quot;) .header(&quot;x-rapidapi-host&quot;, &quot;flight-radar1.p.rapidapi.com&quot;) .method(&quot;GET&quot;, HttpRequest.BodyPublishers.noBody()) .build(); //RapidAPI request and response HttpResponse&lt;String&gt; response = HttpClient.newHttpClient().send(request, HttpResponse.BodyHandlers.ofString()); //RapidAPI Body System.out.println(response.body()); . {&#34;version&#34;:1549273446,&#34;rows&#34;:[{&#34;description&#34;:&#34;Airbus A220 family&#34;,&#34;models&#34;:[{&#34;Name&#34;:&#34;Airbus A220-100&#34;,&#34;Code&#34;:&#34;BCS1&#34;},{&#34;Name&#34;:&#34;Airbus A220-300&#34;,&#34;Code&#34;:&#34;BCS3&#34;}]},{&#34;description&#34;:&#34;Airbus A300 family&#34;,&#34;models&#34;:[{&#34;Name&#34;:&#34;Airbus A300&#34;,&#34;Code&#34;:&#34;A30B&#34;},{&#34;Name&#34;:&#34;Airbus A300-600&#34;,&#34;Code&#34;:&#34;A306&#34;}]},{&#34;description&#34;:&#34;Airbus A310 family&#34;,&#34;models&#34;:[{&#34;Name&#34;:&#34;Airbus A310&#34;,&#34;Code&#34;:&#34;A310&#34;}]},{&#34;description&#34;:&#34;Airbus A320 family&#34;,&#34;models&#34;:[{&#34;Name&#34;:&#34;Airbus A318&#34;,&#34;Code&#34;:&#34;A318&#34;},{&#34;Name&#34;:&#34;Airbus A319&#34;,&#34;Code&#34;:&#34;A319&#34;},{&#34;Name&#34;:&#34;Airbus A319neo&#34;,&#34;Code&#34;:&#34;A19N&#34;},{&#34;Name&#34;:&#34;Airbus A320&#34;,&#34;Code&#34;:&#34;A320&#34;},{&#34;Name&#34;:&#34;Airbus A320neo&#34;,&#34;Code&#34;:&#34;A20N&#34;},{&#34;Name&#34;:&#34;Airbus A321&#34;,&#34;Code&#34;:&#34;A321&#34;},{&#34;Name&#34;:&#34;Airbus A321neo&#34;,&#34;Code&#34;:&#34;A21N&#34;}]},{&#34;description&#34;:&#34;Airbus A330 family&#34;,&#34;models&#34;:[{&#34;Name&#34;:&#34;Airbus A330-200&#34;,&#34;Code&#34;:&#34;A332&#34;},{&#34;Name&#34;:&#34;Airbus A330-300&#34;,&#34;Code&#34;:&#34;A333&#34;},{&#34;Name&#34;:&#34;Airbus A330-900&#34;,&#34;Code&#34;:&#34;A339&#34;}]},{&#34;description&#34;:&#34;Airbus A340 family&#34;,&#34;models&#34;:[{&#34;Name&#34;:&#34;Airbus A340-200&#34;,&#34;Code&#34;:&#34;A342&#34;},{&#34;Name&#34;:&#34;Airbus A340-300&#34;,&#34;Code&#34;:&#34;A343&#34;},{&#34;Name&#34;:&#34;Airbus A340-500&#34;,&#34;Code&#34;:&#34;A345&#34;},{&#34;Name&#34;:&#34;Airbus A340-600&#34;,&#34;Code&#34;:&#34;A346&#34;}]},{&#34;description&#34;:&#34;Airbus A350 family&#34;,&#34;models&#34;:[{&#34;Name&#34;:&#34;Airbus A350-1000&#34;,&#34;Code&#34;:&#34;A35K&#34;},{&#34;Name&#34;:&#34;Airbus A350-900&#34;,&#34;Code&#34;:&#34;A359&#34;}]},{&#34;description&#34;:&#34;Airbus A380-800&#34;,&#34;models&#34;:[{&#34;Name&#34;:&#34;Airbus A380-800&#34;,&#34;Code&#34;:&#34;A388&#34;}]},{&#34;description&#34;:&#34;ATR 42 family&#34;,&#34;models&#34;:[{&#34;Name&#34;:&#34;ATR 42-300&#34;,&#34;Code&#34;:&#34;AT43&#34;},{&#34;Name&#34;:&#34;ATR 42-500&#34;,&#34;Code&#34;:&#34;AT45&#34;},{&#34;Name&#34;:&#34;ATR 42-600&#34;,&#34;Code&#34;:&#34;AT46&#34;}]},{&#34;description&#34;:&#34;ATR 72 family&#34;,&#34;models&#34;:[{&#34;Name&#34;:&#34;ATR 72-200&#34;,&#34;Code&#34;:&#34;AT72&#34;},{&#34;Name&#34;:&#34;ATR 72-500&#34;,&#34;Code&#34;:&#34;AT75&#34;},{&#34;Name&#34;:&#34;ATR 72-600&#34;,&#34;Code&#34;:&#34;AT76&#34;}]},{&#34;description&#34;:&#34;Avro RJ family&#34;,&#34;models&#34;:[{&#34;Name&#34;:&#34;Avro RJ100&#34;,&#34;Code&#34;:&#34;RJ1H&#34;},{&#34;Name&#34;:&#34;Avro RJ70&#34;,&#34;Code&#34;:&#34;RJ70&#34;},{&#34;Name&#34;:&#34;Avro RJ85&#34;,&#34;Code&#34;:&#34;RJ85&#34;}]},{&#34;description&#34;:&#34;Boeing 737 family&#34;,&#34;models&#34;:[{&#34;Name&#34;:&#34;Boeing 737 MAX 7&#34;,&#34;Code&#34;:&#34;B37M&#34;},{&#34;Name&#34;:&#34;Boeing 737 MAX 8&#34;,&#34;Code&#34;:&#34;B38M&#34;},{&#34;Name&#34;:&#34;Boeing 737 MAX 9&#34;,&#34;Code&#34;:&#34;B39M&#34;},{&#34;Name&#34;:&#34;Boeing 737-200&#34;,&#34;Code&#34;:&#34;B732&#34;},{&#34;Name&#34;:&#34;Boeing 737-300&#34;,&#34;Code&#34;:&#34;B733&#34;},{&#34;Name&#34;:&#34;Boeing 737-400&#34;,&#34;Code&#34;:&#34;B734&#34;},{&#34;Name&#34;:&#34;Boeing 737-500&#34;,&#34;Code&#34;:&#34;B735&#34;},{&#34;Name&#34;:&#34;Boeing 737-600&#34;,&#34;Code&#34;:&#34;B736&#34;},{&#34;Name&#34;:&#34;Boeing 737-700&#34;,&#34;Code&#34;:&#34;B737&#34;},{&#34;Name&#34;:&#34;Boeing 737-800&#34;,&#34;Code&#34;:&#34;B738&#34;},{&#34;Name&#34;:&#34;Boeing 737-900&#34;,&#34;Code&#34;:&#34;B739&#34;}]},{&#34;description&#34;:&#34;Boeing 747 family&#34;,&#34;models&#34;:[{&#34;Name&#34;:&#34;Boeing 747-200&#34;,&#34;Code&#34;:&#34;B742&#34;},{&#34;Name&#34;:&#34;Boeing 747-300&#34;,&#34;Code&#34;:&#34;B743&#34;},{&#34;Name&#34;:&#34;Boeing 747-400&#34;,&#34;Code&#34;:&#34;B744&#34;},{&#34;Name&#34;:&#34;Boeing 747-8&#34;,&#34;Code&#34;:&#34;B748&#34;},{&#34;Name&#34;:&#34;Boeing 747SP&#34;,&#34;Code&#34;:&#34;B74S&#34;}]},{&#34;description&#34;:&#34;Boeing 757 family&#34;,&#34;models&#34;:[{&#34;Name&#34;:&#34;Boeing 757-200&#34;,&#34;Code&#34;:&#34;B752&#34;},{&#34;Name&#34;:&#34;Boeing 757-300&#34;,&#34;Code&#34;:&#34;B753&#34;}]},{&#34;description&#34;:&#34;Boeing 767 family&#34;,&#34;models&#34;:[{&#34;Name&#34;:&#34;Boeing 767-200&#34;,&#34;Code&#34;:&#34;B762&#34;},{&#34;Name&#34;:&#34;Boeing 767-300&#34;,&#34;Code&#34;:&#34;B763&#34;},{&#34;Name&#34;:&#34;Boeing 767-400&#34;,&#34;Code&#34;:&#34;B764&#34;}]},{&#34;description&#34;:&#34;Boeing 777 family&#34;,&#34;models&#34;:[{&#34;Name&#34;:&#34;Boeing 777-200&#34;,&#34;Code&#34;:&#34;B772&#34;},{&#34;Name&#34;:&#34;Boeing 777-200LR&#34;,&#34;Code&#34;:&#34;B77L&#34;},{&#34;Name&#34;:&#34;Boeing 777-300&#34;,&#34;Code&#34;:&#34;B773&#34;},{&#34;Name&#34;:&#34;Boeing 777-300ER&#34;,&#34;Code&#34;:&#34;B77W&#34;}]},{&#34;description&#34;:&#34;Boeing 787 family&#34;,&#34;models&#34;:[{&#34;Name&#34;:&#34;Boeing 787-10&#34;,&#34;Code&#34;:&#34;B78X&#34;},{&#34;Name&#34;:&#34;Boeing 787-8&#34;,&#34;Code&#34;:&#34;B788&#34;},{&#34;Name&#34;:&#34;Boeing 787-9&#34;,&#34;Code&#34;:&#34;B789&#34;}]},{&#34;description&#34;:&#34;Bombardier CRJ family&#34;,&#34;models&#34;:[{&#34;Name&#34;:&#34;Bombardier CRJ-100&#34;,&#34;Code&#34;:&#34;CRJ1&#34;},{&#34;Name&#34;:&#34;Bombardier CRJ-1000&#34;,&#34;Code&#34;:&#34;CRJX&#34;},{&#34;Name&#34;:&#34;Bombardier CRJ-200&#34;,&#34;Code&#34;:&#34;CRJ2&#34;},{&#34;Name&#34;:&#34;Bombardier CRJ-700&#34;,&#34;Code&#34;:&#34;CRJ7&#34;},{&#34;Name&#34;:&#34;Bombardier CRJ-900&#34;,&#34;Code&#34;:&#34;CRJ9&#34;}]},{&#34;description&#34;:&#34;Bombardier Dash 8 family&#34;,&#34;models&#34;:[{&#34;Name&#34;:&#34;Bombardier Dash 8-100&#34;,&#34;Code&#34;:&#34;DH8A&#34;},{&#34;Name&#34;:&#34;Bombardier Dash 8-200&#34;,&#34;Code&#34;:&#34;DH8B&#34;},{&#34;Name&#34;:&#34;Bombardier Dash 8-300&#34;,&#34;Code&#34;:&#34;DH8C&#34;},{&#34;Name&#34;:&#34;Bombardier Dash 8-400&#34;,&#34;Code&#34;:&#34;DH8D&#34;}]},{&#34;description&#34;:&#34;Embraer E-Jet family&#34;,&#34;models&#34;:[{&#34;Name&#34;:&#34;Embraer E170&#34;,&#34;Code&#34;:&#34;E170&#34;},{&#34;Name&#34;:&#34;Embraer E175 (long)&#34;,&#34;Code&#34;:&#34;E75L&#34;},{&#34;Name&#34;:&#34;Embraer E175 (short)&#34;,&#34;Code&#34;:&#34;E75S&#34;},{&#34;Name&#34;:&#34;Embraer E190&#34;,&#34;Code&#34;:&#34;E190&#34;},{&#34;Name&#34;:&#34;Embraer E195&#34;,&#34;Code&#34;:&#34;E195&#34;}]},{&#34;description&#34;:&#34;Embraer RJ135&#34;,&#34;models&#34;:[{&#34;Name&#34;:&#34;Embraer RJ135&#34;,&#34;Code&#34;:&#34;E135&#34;}]},{&#34;description&#34;:&#34;Embraer RJ145&#34;,&#34;models&#34;:[{&#34;Name&#34;:&#34;Embraer RJ145&#34;,&#34;Code&#34;:&#34;E145&#34;}]},{&#34;description&#34;:&#34;Fokker family&#34;,&#34;models&#34;:[{&#34;Name&#34;:&#34;Fokker 100&#34;,&#34;Code&#34;:&#34;F100&#34;},{&#34;Name&#34;:&#34;Fokker 50&#34;,&#34;Code&#34;:&#34;F50&#34;},{&#34;Name&#34;:&#34;Fokker 70&#34;,&#34;Code&#34;:&#34;F70&#34;}]},{&#34;description&#34;:&#34;McDonnell Douglas DC-10&#34;,&#34;models&#34;:[{&#34;Name&#34;:&#34;McDonnell Douglas DC-10&#34;,&#34;Code&#34;:&#34;DC10&#34;}]},{&#34;description&#34;:&#34;McDonnell Douglas MD-11&#34;,&#34;models&#34;:[{&#34;Name&#34;:&#34;McDonnell Douglas MD-11&#34;,&#34;Code&#34;:&#34;MD11&#34;}]},{&#34;description&#34;:&#34;McDonnell Douglas MD-80 family&#34;,&#34;models&#34;:[{&#34;Name&#34;:&#34;McDonnell Douglas MD-81&#34;,&#34;Code&#34;:&#34;MD81&#34;},{&#34;Name&#34;:&#34;McDonnell Douglas MD-82&#34;,&#34;Code&#34;:&#34;MD82&#34;},{&#34;Name&#34;:&#34;McDonnell Douglas MD-83&#34;,&#34;Code&#34;:&#34;MD83&#34;},{&#34;Name&#34;:&#34;McDonnell Douglas MD-87&#34;,&#34;Code&#34;:&#34;MD87&#34;},{&#34;Name&#34;:&#34;McDonnell Douglas MD-88&#34;,&#34;Code&#34;:&#34;MD88&#34;}]},{&#34;description&#34;:&#34;McDonnell Douglas MD-90&#34;,&#34;models&#34;:[{&#34;Name&#34;:&#34;McDonnell Douglas MD-90&#34;,&#34;Code&#34;:&#34;MD90&#34;}]},{&#34;description&#34;:&#34;Saab 2000&#34;,&#34;models&#34;:[{&#34;Name&#34;:&#34;Saab 2000&#34;,&#34;Code&#34;:&#34;SB20&#34;}]},{&#34;description&#34;:&#34;Saab 340&#34;,&#34;models&#34;:[{&#34;Name&#34;:&#34;Saab 340&#34;,&#34;Code&#34;:&#34;SF34&#34;}]},{&#34;description&#34;:&#34;Sukhoi Superjet 100&#34;,&#34;models&#34;:[{&#34;Name&#34;:&#34;Sukhoi Superjet 100&#34;,&#34;Code&#34;:&#34;SU95&#34;}]}]} . import java.net.URI; import java.net.http.HttpClient; import java.net.http.HttpRequest; import java.net.http.HttpResponse; import java.util.Date; import java.util.HashMap; import org.json.simple.JSONObject; import org.json.simple.parser.JSONParser; import org.springframework.http.HttpStatus; import org.springframework.http.ResponseEntity; import org.springframework.web.bind.annotation.*; @RestController // annotation to create a RESTful web services @RequestMapping(&quot;/api/flights&quot;) //prefix of API public class flights { private JSONObject body; //last run result private HttpStatus status; //last run status String last_run = null; //last run day of month @GetMapping(&quot;/monthly&quot;) //added to end of prefix as endpoint public ResponseEntity&lt;JSONObject&gt; flights() { //calls API once a day, sets body and status properties String today = new Date().toString().substring(0,500); if (last_run == null || !today.equals(last_run)) { try { HttpRequest request = HttpRequest.newBuilder() .uri(URI.create(&quot;https://flight-radar1.p.rapidapi.com/aircrafts/list&quot;)) .header(&quot;x-rapidapi-key&quot;, &quot;9e3f40a0cemshcced0bdaa85f0c0p1e3309jsnbb4748bd1d8c&quot;) .header(&quot;x-rapidapi-host&quot;, &quot;flight-radar1.p.rapidapi.com&quot;) .method(&quot;GET&quot;, HttpRequest.BodyPublishers.noBody()) .build(); //RapidAPI request and response HttpResponse&lt;String&gt; response = HttpClient.newHttpClient().send(request, HttpResponse.BodyHandlers.ofString()); //JSONParser extracts text body and parses to JSONObject this.body = (JSONObject) new JSONParser().parse(response.body()); this.status = HttpStatus.OK; //200 success this.last_run = today; } catch (Exception e) { //capture failure info HashMap&lt;String, String&gt; status = new HashMap&lt;&gt;(); status.put(&quot;status&quot;, &quot;RapidApi failure: &quot; + e); //Setup object for error this.body = (JSONObject) status; this.status = HttpStatus.INTERNAL_SERVER_ERROR; //500 error this.last_run = null; } } //return JSONObject in RESTful style return new ResponseEntity&lt;&gt;(body, status); } } . | import org.json.simple.JSONObject; package org.json.simple does not exist . Benefit of using and API? . APIs can be found all over the internet. We can just use a few lines of code to get lots of data from the internet, so it is easier, more efficient, and less time consuming. | . Benefit(s) of backend implementation? . Can set limit on how many times an api could run in a day or a month so that it would not exceed the maximun amount; for exmaple, the flights api (free subscription) only allows the api to be run 500 times per month | .",
            "url": "https://lindaliu1202.github.io/lindaliu_blog/jupyter/2022/10/02/flights_api.html",
            "relUrl": "/jupyter/2022/10/02/flights_api.html",
            "date": " • Oct 2, 2022"
        }
        
    
  
    
        ,"post21": {
            "title": "Arrays and Images",
            "content": "Saving PNG to GIF . Image IO read and Image IO write are focus of this code. A key portion of working with Images, or any file, is to know location of the input and output directories. . import javax.imageio.ImageIO; import java.io.File; import java.io.IOException; import java.awt.image.BufferedImage; public class ImageIOTest { public static void main( String[] args ){ BufferedImage img = null; // buffer type try { // Name of file and directories String name = &quot;MonaLisa&quot;; String in = &quot;../images/&quot;; String out = &quot;../images/tmp/&quot;; // Either use URL or File for reading image using ImageIO File imageFile = new File(in + name + &quot;.png&quot;); img = ImageIO.read(imageFile); // set buffer of image data // ImageIO Image write to gif in Java // Documentation https://docs.oracle.com/javase/tutorial/2d/images/index.html ImageIO.write(img, &quot;gif&quot;, new File(out + name + &quot;.gif&quot;) ); // write buffer to gif } catch (IOException e) { e.printStackTrace(); } System.out.println(&quot;Success&quot;); } } ImageIOTest.main(null); . Success . The java.awt.Image class is the superclass that represents graphical images as rectangular arrays of pixels. . | The java.awt.image.BufferedImage class, which extends the Image class to allow the application to operate directly with image data (for example, retrieving or setting up the pixel color). Applications can directly construct instances of this class. . | The BufferedImage class is a cornerstone of the Java 2D immediate-mode imaging API. It manages the image in memory and provides methods for storing, interpreting, and obtaining pixel data. Since BufferedImage is a subclass of Image it can be rendered by the Graphics and Graphics2D methods that accept an Image parameter. . | A BufferedImage is essentially an Image with an accessible data buffer. It is therefore more efficient to work directly with BufferedImage. A BufferedImage has a ColorModel and a Raster of image data. The ColorModel provides a color interpretation of the image&#39;s pixel data. . | . Reading/Loading an Image . Java 2D supports loading these external image formats into its BufferedImage format using its Image I/O API which is in the javax.imageio package. Image I/O has built-in support for GIF, PNG, JPEG, BMP, and WBMP. Image I/O is also extensible so that developers or administrators can &quot;plug-in&quot; support for additional formats. For example, plug-ins for TIFF and JPEG 2000 are separately available. . | To load an image from a specific file use the following code, which is from LoadImageApp.java: . BufferedImage img = null; . try { . img = ImageIO.read(new File(&quot;strawberry.jpg&quot;)); . } catch (IOException e) { . } . | Image I/O recognises the contents of the file as a JPEG format image, and decodes it into a BufferedImage which can be directly used by Java 2D. . | LoadImageApp.java shows how to display this image. . | . Image Scaling and ASCII Conversion . In this example we print out a row of text for each row in the image. However, it seems as if the image is too tall. To address this problem, try to output a single character per block of pixels. In particular, average the grayscale values in a rectangular block that’s twice as tall as it is wide, and print out a single character for this block. . import java.awt.Color; import java.awt.image.BufferedImage; import java.awt.Image; import java.awt.Graphics2D; import java.io.File; import java.io.FileWriter; import java.io.IOException; import java.io.PrintWriter; import java.nio.file.Files; import java.nio.file.Path; import java.nio.file.Paths; import javax.imageio.stream.ImageOutputStream; import javax.imageio.stream.ImageInputStream; import javax.imageio.metadata.IIOMetadata; import javax.imageio.IIOImage; import javax.imageio.ImageIO; import javax.imageio.ImageWriteParam; import javax.imageio.ImageWriter; import javax.imageio.ImageReader; import javax.imageio.ImageTypeSpecifier; public class Pics { private final String inDir = &quot;../images/&quot;; // location of images private final String outDir = &quot;../images/tmp/&quot;; // location of created files private final String greyscaleDir = &quot;../images/tmp/greyscale/&quot;; private final String redscaleDir = &quot;../images/tmp/redscale/&quot;; private final String greenscaleDir = &quot;../images/tmp/greenscale/&quot;; private final String bluescaleDir = &quot;../images/tmp/bluescale/&quot;; private String inFile; private String resizedFile; private String greyscaleFile; private String redscaleFile; private String greenscaleFile; private String bluescaleFile; private String asciiFile; private String ext; // extension of file private long bytes; private int width; private int height; // Constructor obtains attributes of picture public Pics(String name, String ext) { this.ext = ext; this.inFile = this.inDir + name + &quot;.&quot; + ext; this.resizedFile = this.outDir + name + &quot;.&quot; + ext; this.greyscaleFile = this.greyscaleDir + name + &quot;.&quot; + ext; this.redscaleFile = this.redscaleDir + name + &quot;.&quot; + ext; this.greenscaleFile = this.greenscaleDir + name + &quot;.&quot; + ext; this.bluescaleFile = this.bluescaleDir + name + &quot;.&quot; + ext; this.asciiFile = this.outDir + name + &quot;.txt&quot;; this.setStats(); } // An image contains metadata, namely size, width, and height public void setStats() { BufferedImage img; try { Path path = Paths.get(this.inFile); this.bytes = Files.size(path); img = ImageIO.read(new File(this.inFile)); this.width = img.getWidth(); this.height = img.getHeight(); } catch (IOException e) { } } // Console print of data public void printStats(String msg) { System.out.println(msg + &quot;: &quot; + this.bytes + &quot; &quot; + this.width + &quot;x&quot; + this.height + &quot; &quot; + this.inFile); } // Convert scaled image into buffered image public static BufferedImage convertToBufferedImage(Image img) { // Create a buffered image with transparency BufferedImage bi = new BufferedImage( img.getWidth(null), img.getHeight(null), BufferedImage.TYPE_INT_ARGB); // magic? Graphics2D graphics2D = bi.createGraphics(); graphics2D.drawImage(img, 0, 0, null); graphics2D.dispose(); return bi; } // Scale or reduce to &quot;scale&quot; percentage provided public void resize(int scale) { BufferedImage img = null; Image resizedImg = null; int width = (int) (this.width * (scale/100.0) + 0.5); int height = (int) (this.height * (scale/100.0) + 0.5); try { // read an image to BufferedImage for processing img = ImageIO.read(new File(this.inFile)); // set buffer of image data // create a new BufferedImage for drawing resizedImg = img.getScaledInstance(width, height, Image.SCALE_SMOOTH); } catch (IOException e) { return; } try { ImageIO.write(convertToBufferedImage(resizedImg), this.ext, new File(resizedFile)); } catch (IOException e) { return; } this.inFile = this.resizedFile; // use scaled file vs original file in Class this.setStats(); } // convert every pixel to an ascii character (ratio does not seem correct) public void convertToAscii() { BufferedImage img = null; PrintWriter asciiPrt = null; FileWriter asciiWrt = null; try { File file = new File(this.asciiFile); Files.deleteIfExists(file.toPath()); } catch (IOException e) { System.out.println(&quot;Delete File error: &quot; + e); } try { asciiPrt = new PrintWriter(asciiWrt = new FileWriter(this.asciiFile, true)); } catch (IOException e) { System.out.println(&quot;ASCII out file create error: &quot; + e); } try { img = ImageIO.read(new File(this.inFile)); } catch (IOException e) { } for (int i = 0; i &lt; img.getHeight();) { for (int j = 0; j &lt; img.getWidth(); j++) { Color col = new Color(img.getRGB(j, i)); double pixVal = (((col.getRed() * 0.30) + (col.getBlue() * 0.59) + (col .getGreen() * 0.11))); try { asciiPrt.print(asciiChar(pixVal)); asciiPrt.flush(); asciiWrt.flush(); } catch (Exception ex) { } } try { asciiPrt.println(&quot;&quot;); asciiPrt.flush(); asciiWrt.flush(); } catch (Exception ex) { } i = i+3; } } // conversion table, there may be better out there ie https://www.billmongan.com/Ursinus-CS173-Fall2020/Labs/ASCIIArt public String asciiChar(double g) { String str = &quot; &quot;; if (g &gt;= 240) { str = &quot; &quot;; } else if (g &gt;= 210) { str = &quot;.&quot;; } else if (g &gt;= 190) { str = &quot;*&quot;; } else if (g &gt;= 170) { str = &quot;+&quot;; } else if (g &gt;= 120) { str = &quot;^&quot;; } else if (g &gt;= 110) { str = &quot;&amp;&quot;; } else if (g &gt;= 80) { str = &quot;8&quot;; } else if (g &gt;= 60) { str = &quot;#&quot;; } else { str = &quot;@&quot;; } return str; } //greyscale hack, reference website: https://medium.com/javarevisited/converting-rgb-image-to-the-grayscale-image-in-java-9e1edc5bd6e7 public void greyscale() { BufferedImage img = null; //In Java programming, null can be assigned to any variable of a reference type (that is, a non-primitive type) to indicate that the variable does not refer to any object or array. BufferedImage greyscaleImg = null; try { // read an image to BufferedImage for processing img = ImageIO.read(new File(this.inFile)); // set buffer of image data // create a new BufferedImage for drawing greyscaleImg = img; for (int i=0; i&lt;img.getHeight(); i++) { for (int j=0; j&lt;img.getWidth(); j++) { Color c = new Color(img.getRGB(j, i)); int red = (int) (c.getRed() * 0.299); int green = (int) (c.getGreen() * 0.587); int blue = (int) (c.getBlue() * 0.114); Color newColor = new Color (red+green+blue, red+green+blue, red+green+blue); greyscaleImg.setRGB(j, i, newColor.getRGB()); } } } catch (IOException e) { return; } try { ImageIO.write(convertToBufferedImage(greyscaleImg), this.ext, new File(greyscaleFile)); } catch (IOException e) { return; } this.inFile = this.greyscaleFile; // use scaled file vs original file in Class this.setStats(); } public void redscale() { BufferedImage img = null; //In Java programming, null can be assigned to any variable of a reference type (that is, a non-primitive type) to indicate that the variable does not refer to any object or array. BufferedImage redscaleImg = null; try { // read an image to BufferedImage for processing img = ImageIO.read(new File(this.inFile)); // set buffer of image data // create a new BufferedImage for drawing redscaleImg = img; for (int i=0; i&lt;img.getHeight(); i++) { for (int j=0; j&lt;img.getWidth(); j++) { Color c = new Color(img.getRGB(j, i)); int red = (int) (c.getRed()); int green = 0; int blue = 0; Color newColor = new Color (red, green, blue); redscaleImg.setRGB(j, i, newColor.getRGB()); } } } catch (IOException e) { return; } try { ImageIO.write(convertToBufferedImage(redscaleImg), this.ext, new File(redscaleFile)); } catch (IOException e) { return; } this.inFile = this.redscaleFile; // use scaled file vs original file in Class this.setStats(); } public void greenscale() { BufferedImage img = null; //In Java programming, null can be assigned to any variable of a reference type (that is, a non-primitive type) to indicate that the variable does not refer to any object or array. BufferedImage greenscaleImg = null; try { // read an image to BufferedImage for processing img = ImageIO.read(new File(this.inFile)); // set buffer of image data // create a new BufferedImage for drawing greenscaleImg = img; for (int i=0; i&lt;img.getHeight(); i++) { for (int j=0; j&lt;img.getWidth(); j++) { Color c = new Color(img.getRGB(j, i)); int red = 0; int green = (int) (c.getGreen()); int blue = 0; Color newColor = new Color (red, green, blue); greenscaleImg.setRGB(j, i, newColor.getRGB()); } } } catch (IOException e) { return; } try { ImageIO.write(convertToBufferedImage(greenscaleImg), this.ext, new File(greenscaleFile)); } catch (IOException e) { return; } this.inFile = this.greenscaleFile; // use scaled file vs original file in Class this.setStats(); } public void bluescale() { BufferedImage img = null; //In Java programming, null can be assigned to any variable of a reference type (that is, a non-primitive type) to indicate that the variable does not refer to any object or array. BufferedImage bluescaleImg = null; try { // read an image to BufferedImage for processing img = ImageIO.read(new File(this.inFile)); // set buffer of image data // create a new BufferedImage for drawing bluescaleImg = img; for (int i=0; i&lt;img.getHeight(); i++) { for (int j=0; j&lt;img.getWidth(); j++) { Color c = new Color(img.getRGB(j, i)); int red = 0; int green = 0; int blue = (int) (c.getBlue()); Color newColor = new Color (red, green, blue); bluescaleImg.setRGB(j, i, newColor.getRGB()); } } } catch (IOException e) { return; } try { ImageIO.write(convertToBufferedImage(bluescaleImg), this.ext, new File(bluescaleFile)); } catch (IOException e) { return; } this.inFile = this.bluescaleFile; // use scaled file vs original file in Class this.setStats(); } // tester/driver public static void main(String[] args) throws IOException { Pics monaLisa = new Pics(&quot;MonaLisa&quot;, &quot;png&quot;); monaLisa.printStats(&quot;Original&quot;); monaLisa.resize(33); //33 percent of the original monaLisa.printStats(&quot;Scaled&quot;); monaLisa.convertToAscii(); monaLisa.greyscale(); monaLisa.redscale(); monaLisa.greenscale(); monaLisa.bluescale(); Pics pumpkin = new Pics(&quot;pumpkin&quot;, &quot;png&quot;); pumpkin.printStats(&quot;Original&quot;); pumpkin.resize(33); pumpkin.printStats(&quot;Scaled&quot;); pumpkin.convertToAscii(); pumpkin.greyscale(); pumpkin.greenscale(); monaLisa.bluescale(); } } Pics.main(null); . Original: 499298 389x413 ../images/MonaLisa.png Scaled: 55625 128x136 ../images/tmp/MonaLisa.png Original: 39392 302x265 ../images/pumpkin.png Scaled: 10497 100x87 ../images/tmp/pumpkin.png . Problem (greyscale) . don&#39;t know what&#39;s wrong with the .setRGB() . (output) | greyscaleImg.setRGB((int)(j), (int)(i), (int)(newColor.getRGB())); cannot find symbol symbol: method setRGB(int,int,int) . solved: . changed Image greyscaleImg = null; to BufferedImage greyscaleImg = null; . Problem (greyscale) . (output) Original: 499298 389x413 ../images/MonaLisa.png Scaled: 55625 128x136 ../images/tmp/greyscale/MonaLisa.png . . java.lang.NullPointerException: null at java.base/java.io.File.(File.java:278) at Pics.greyscale(#34:1) at Pics.main(#34:1) at .(#60:1)&lt;/p&gt; picture appeared in the tmp/greyscale/ is not greyscaled (original image) . solved: . public Pics(String name, String ext) { this.ext = ext; this.inFile = this.inDir + name + &quot;.&quot; + ext; this.resizedFile = this.outDir + name + &quot;.&quot; + ext; this.resizedFile = this.greyscaleDir + name + &quot;.&quot; + ext; this.asciiFile = this.outDir + name + &quot;.txt&quot;; this.setStats(); } . public Pics(String name, String ext) { this.ext = ext; this.inFile = this.inDir + name + &quot;.&quot; + ext; this.resizedFile = this.outDir + name + &quot;.&quot; + ext; this.greyscaleFile = this.greyscaleDir + name + &quot;.&quot; + ext; this.asciiFile = this.outDir + name + &quot;.txt&quot;; this.setStats(); } . forgot to change resizedFile to greyscaleFile, so the image appeared in the greyscale directory is the resized image . &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; Hacks . Continue to work with Classes, Arrays, and 2D arrays. FYI, you may need to make a directory /tmp under notebook images. . Look at comments above and see if there is better conversions for ASCII to reduce elongation and distortion. | Try to convert images into Grey Scale, Red Scale, Blue Scale, and Green Scale. | Additional Image Code . Runtime using Thymeleaf . random notes when listening to the lecture: . image buffer (look additional resources if don&#39;t understand) . changing float into int because you can&#39;t do half a pixel . not one pixel at a time -&gt; four by eight or eight by four . average the rgb values - greyscale make a new array and work with value inside the array for averaging . resource - conversion table, there may be better out there ie https://www.billmongan.com/Ursinus-CS173-Fall2020/Labs/ASCIIArt . &lt;/div&gt; .",
            "url": "https://lindaliu1202.github.io/lindaliu_blog/jupyter/2022/09/30/image_io.html",
            "relUrl": "/jupyter/2022/09/30/image_io.html",
            "date": " • Sep 30, 2022"
        }
        
    
  
    
        ,"post22": {
            "title": "Fibonacci",
            "content": "Stream (example) . import java.util.ArrayList; import java.util.HashMap; import java.util.stream.Stream; /* Objective will require changing to abstract class with one or more abstract methods below */ public class Fibo { String name; // name or title of method int size; // nth sequence int hashID; // counter for hashIDs in hash map ArrayList&lt;Long&gt; list; // captures current Fibonacci sequence HashMap&lt;Integer, Object&gt; hash; // captures each sequence leading to final result /* Zero parameter constructor uses Telescoping technique to allow setting of the required value nth @param: none */ public Fibo() { this(20); // telescope to avoid code duplication, using default as 20 } /* Construct the nth fibonacci number @param: nth number, the value is constrained to 92 because of overflow in a long */ public Fibo(int nth) { this.size = nth; this.list = new ArrayList&lt;&gt;(); this.hashID = 0; this.hash = new HashMap&lt;&gt;(); //initialize fibonacci and time mvc this.init(); } /* This Method should be &quot;abstract&quot; Leave method as protected, as it is only authorized to extender of the class Make new class that extends and defines init() Inside references within this class would change from this to super Repeat process using for, while, recursion */ protected void init() { this.name = &quot;Stream&quot;; Stream.iterate(new long[]{0, 1}, f -&gt; new long[]{f[1], f[0] + f[1]}) .limit(this.size) .forEach(f -&gt; this.setData(f[0]) ); } /* Number is added to fibonacci sequence, current state of &quot;list&quot; is added to hash for hashID &quot;num&quot; */ public void setData(long num) { list.add(num); hash.put(this.hashID++, list.clone()); } /* Custom Getter to return last element in fibonacci sequence */ public long getNth() { return list.get(this.size - 1); } /* Custom Getter to return last fibonacci sequence in HashMap */ public Object getNthSeq(int i) { return hash.get(i); } /* Console/Terminal supported print method */ public void print() { System.out.println(&quot;Init method = &quot; + this.name); System.out.println(&quot;fibonacci Number &quot; + this.size + &quot; = &quot; + this.getNth()); System.out.println(&quot;fibonacci List = &quot; + this.list); System.out.println(&quot;fibonacci Hashmap = &quot; + this.hash); for (int i=0 ; i&lt;this.size; i++ ) { System.out.println(&quot;fibonacci Sequence &quot; + (i+1) + &quot; = &quot; + this.getNthSeq(i)); } } /* Tester class method. If this becomes abstract you will not be able to test it directly ... Change this method to call &quot;main&quot; class of each of the extended classes */ static public void main(String[] args) { Fibo fib = new Fibo(); fib.print(); } } Fibo.main(null); . Init method = Stream fibonacci Number 20 = 4181 fibonacci List = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181] fibonacci Hashmap = {0=[0], 1=[0, 1], 2=[0, 1, 1], 3=[0, 1, 1, 2], 4=[0, 1, 1, 2, 3], 5=[0, 1, 1, 2, 3, 5], 6=[0, 1, 1, 2, 3, 5, 8], 7=[0, 1, 1, 2, 3, 5, 8, 13], 8=[0, 1, 1, 2, 3, 5, 8, 13, 21], 9=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34], 10=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55], 11=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89], 12=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144], 13=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233], 14=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377], 15=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610], 16=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987], 17=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597], 18=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584], 19=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181]} fibonacci Sequence 1 = [0] fibonacci Sequence 2 = [0, 1] fibonacci Sequence 3 = [0, 1, 1] fibonacci Sequence 4 = [0, 1, 1, 2] fibonacci Sequence 5 = [0, 1, 1, 2, 3] fibonacci Sequence 6 = [0, 1, 1, 2, 3, 5] fibonacci Sequence 7 = [0, 1, 1, 2, 3, 5, 8] fibonacci Sequence 8 = [0, 1, 1, 2, 3, 5, 8, 13] fibonacci Sequence 9 = [0, 1, 1, 2, 3, 5, 8, 13, 21] fibonacci Sequence 10 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] fibonacci Sequence 11 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55] fibonacci Sequence 12 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89] fibonacci Sequence 13 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144] fibonacci Sequence 14 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233] fibonacci Sequence 15 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377] fibonacci Sequence 16 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610] fibonacci Sequence 17 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987] fibonacci Sequence 18 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597] fibonacci Sequence 19 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584] fibonacci Sequence 20 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181] . For Loop . import java.util.ArrayList; import java.util.HashMap; import java.util.stream.Stream; /* Objective will require changing to abstract class with one or more abstract methods below */ public class Fibo { String name; // name or title of method int size; // nth sequence int hashID; // counter for hashIDs in hash map ArrayList&lt;Long&gt; list; // captures current Fibonacci sequence HashMap&lt;Integer, Object&gt; hash; // captures each sequence leading to final result /* Zero parameter constructor uses Telescoping technique to allow setting of the required value nth @param: none */ public Fibo() { this(20); // telescope to avoid code duplication, using default as 20 } /* Construct the nth fibonacci number @param: nth number, the value is constrained to 92 because of overflow in a long */ public Fibo(int nth) { this.size = nth; this.list = new ArrayList&lt;&gt;(); this.hashID = 0; this.hash = new HashMap&lt;&gt;(); //initialize fibonacci and time mvc this.init(); } /* This Method should be &quot;abstract&quot; Leave method as protected, as it is only authorized to extender of the class Make new class that extends and defines init() Inside references within this class would change from this to super Repeat process using for, while, recursion */ protected void init() { this.name = &quot;Stream&quot;; Stream.iterate(new long[]{0, 1}, f -&gt; new long[]{f[1], f[0] + f[1]}) .limit(this.size) .forEach(f -&gt; this.setData(f[0]) ); } /* Number is added to fibonacci sequence, current state of &quot;list&quot; is added to hash for hashID &quot;num&quot; */ public void setData(long num) { list.add(num); hash.put(this.hashID++, list.clone()); } /* Custom Getter to return last element in fibonacci sequence */ public long getNth() { return list.get(this.size - 1); } /* Custom Getter to return last fibonacci sequence in HashMap */ public Object getNthSeq(int i) { return hash.get(i); } /* Console/Terminal supported print method */ public void print() { System.out.println(&quot;Init method = &quot; + this.name); System.out.println(&quot;fibonacci Number &quot; + this.size + &quot; = &quot; + this.getNth()); System.out.println(&quot;fibonacci List = &quot; + this.list); System.out.println(&quot;fibonacci Hashmap = &quot; + this.hash); for (int i=0 ; i&lt;this.size; i++ ) { System.out.println(&quot;fibonacci Sequence &quot; + (i+1) + &quot; = &quot; + this.getNthSeq(i)); } } /* Tester class method. If this becomes abstract you will not be able to test it directly ... Change this method to call &quot;main&quot; class of each of the extended classes */ static public void main(String[] args) { FiboForLoop fib = new FiboForLoop(); fib.print(); } } /* Make new class that extends and defines init() Inside references within this class would change from this to super Repeat process using for, while, recursion */ public class FiboForLoop extends Fibo { protected void init(){ this.name = &quot;For Loop&quot;; int num1 = 0; int num2 = 1; int num3; for(int i = 0; i &lt;= this.size; i++){ this.setData(num1); /* On each iteration, we are assigning second number * to the first number and assigning the sum of last two * numbers to the second number */ num3 = num1 + num2; num1 = num2; num2 = num3; } } } Fibo.main(null); . Init method = For Loop fibonacci Number 20 = 4181 fibonacci List = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765] fibonacci Hashmap = {0=[0], 1=[0, 1], 2=[0, 1, 1], 3=[0, 1, 1, 2], 4=[0, 1, 1, 2, 3], 5=[0, 1, 1, 2, 3, 5], 6=[0, 1, 1, 2, 3, 5, 8], 7=[0, 1, 1, 2, 3, 5, 8, 13], 8=[0, 1, 1, 2, 3, 5, 8, 13, 21], 9=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34], 10=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55], 11=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89], 12=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144], 13=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233], 14=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377], 15=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610], 16=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987], 17=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597], 18=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584], 19=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181], 20=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765]} fibonacci Sequence 1 = [0] fibonacci Sequence 2 = [0, 1] fibonacci Sequence 3 = [0, 1, 1] fibonacci Sequence 4 = [0, 1, 1, 2] fibonacci Sequence 5 = [0, 1, 1, 2, 3] fibonacci Sequence 6 = [0, 1, 1, 2, 3, 5] fibonacci Sequence 7 = [0, 1, 1, 2, 3, 5, 8] fibonacci Sequence 8 = [0, 1, 1, 2, 3, 5, 8, 13] fibonacci Sequence 9 = [0, 1, 1, 2, 3, 5, 8, 13, 21] fibonacci Sequence 10 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] fibonacci Sequence 11 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55] fibonacci Sequence 12 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89] fibonacci Sequence 13 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144] fibonacci Sequence 14 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233] fibonacci Sequence 15 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377] fibonacci Sequence 16 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610] fibonacci Sequence 17 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987] fibonacci Sequence 18 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597] fibonacci Sequence 19 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584] fibonacci Sequence 20 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181] . Use of extends and super() . /* Tester class method. If this becomes abstract you will not be able to test it directly ... Change this method to call &quot;main&quot; class of each of the extended classes */ static public void main(String[] args) { FiboForLoop fib = new FiboForLoop(); fib.print(); } /* Make new class that extends and defines init() Inside references within this class would change from this to super Repeat process using for, while, recursion */ public class FiboForLoop extends Fibo { public FiboForLoop() { super(); } public FiboForLoop(int nth) { super(nth); } protected void init(){ super.name = &quot;For Loop&quot;; int num1 = 0; int num2 = 1; int num3; for(int i = 0; i &lt;= this.size; i++){ this.setData(num1); /* On each iteration, we are assigning second number * to the first number and assigning the sum of last two * numbers to the second number */ num3 = num1 + num2; num1 = num2; num2 = num3; } } } Fibo.main(null); . While Loop . import java.util.ArrayList; import java.util.HashMap; import java.util.stream.Stream; /* Objective will require changing to abstract class with one or more abstract methods below */ public class Fibo { String name; // name or title of method int size; // nth sequence int hashID; // counter for hashIDs in hash map ArrayList&lt;Long&gt; list; // captures current Fibonacci sequence HashMap&lt;Integer, Object&gt; hash; // captures each sequence leading to final result /* Zero parameter constructor uses Telescoping technique to allow setting of the required value nth @param: none */ public Fibo() { this(20); // telescope to avoid code duplication, using default as 20 } /* Construct the nth fibonacci number @param: nth number, the value is constrained to 92 because of overflow in a long */ public Fibo(int nth) { this.size = nth; this.list = new ArrayList&lt;&gt;(); this.hashID = 0; // starting with index 0 this.hash = new HashMap&lt;&gt;(); // initialize fibonacci and time mvc this.init(); } /* This Method should be &quot;abstract&quot; Leave method as protected, as it is only authorized to extender of the class Make new class that extends and defines init() Inside references within this class would change from this to super Repeat process using for, while, recursion */ protected void init() { this.name = &quot;Stream&quot;; Stream.iterate(new long[]{0, 1}, f -&gt; new long[]{f[1], f[0] + f[1]}) .limit(this.size) .forEach(f -&gt; this.setData(f[0]) ); } /* Number is added to fibonacci sequence, current state of &quot;list&quot; is added to hash for hashID &quot;num&quot; */ public void setData(long num) { list.add(num); hash.put(this.hashID++, list.clone()); } /* Custom Getter to return last element in fibonacci sequence */ public long getNth() { return list.get(this.size - 1); } /* Custom Getter to return last fibonacci sequence in HashMap */ public Object getNthSeq(int i) { return hash.get(i); } /* Console/Terminal supported print method */ public void print() { System.out.println(&quot;Init method = &quot; + this.name); System.out.println(&quot;fibonacci Number &quot; + this.size + &quot; = &quot; + this.getNth()); System.out.println(&quot;fibonacci List = &quot; + this.list); System.out.println(&quot;fibonacci Hashmap = &quot; + this.hash); for (int i=0 ; i&lt;this.size; i++ ) { System.out.println(&quot;fibonacci Sequence &quot; + (i+1) + &quot; = &quot; + this.getNthSeq(i)); } } /* Tester class method. If this becomes abstract you will not be able to test it directly ... Change this method to call &quot;main&quot; class of each of the extended classes */ static public void main(String[] args) { FiboWhileLoop fib = new FiboWhileLoop(); fib.print(); } } /* Make new class that extends and defines init() Inside references within this class would change from this to super Repeat process using for, while, recursion */ public class FiboWhileLoop extends Fibo { protected void init(){ this.name = &quot;While Loop&quot;; int num1 = 0; int num2 = 1; int num3; int i = 0; while(i &lt;= this.size){ this.setData(num1); num3 = num1 + num2; num1 = num2; num2 = num3; i++; } } } Fibo.main(null); . Init method = While Loop fibonacci Number 20 = 4181 fibonacci List = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765] fibonacci Hashmap = {0=[0], 1=[0, 1], 2=[0, 1, 1], 3=[0, 1, 1, 2], 4=[0, 1, 1, 2, 3], 5=[0, 1, 1, 2, 3, 5], 6=[0, 1, 1, 2, 3, 5, 8], 7=[0, 1, 1, 2, 3, 5, 8, 13], 8=[0, 1, 1, 2, 3, 5, 8, 13, 21], 9=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34], 10=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55], 11=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89], 12=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144], 13=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233], 14=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377], 15=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610], 16=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987], 17=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597], 18=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584], 19=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181], 20=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765]} fibonacci Sequence 1 = [0] fibonacci Sequence 2 = [0, 1] fibonacci Sequence 3 = [0, 1, 1] fibonacci Sequence 4 = [0, 1, 1, 2] fibonacci Sequence 5 = [0, 1, 1, 2, 3] fibonacci Sequence 6 = [0, 1, 1, 2, 3, 5] fibonacci Sequence 7 = [0, 1, 1, 2, 3, 5, 8] fibonacci Sequence 8 = [0, 1, 1, 2, 3, 5, 8, 13] fibonacci Sequence 9 = [0, 1, 1, 2, 3, 5, 8, 13, 21] fibonacci Sequence 10 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] fibonacci Sequence 11 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55] fibonacci Sequence 12 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89] fibonacci Sequence 13 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144] fibonacci Sequence 14 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233] fibonacci Sequence 15 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377] fibonacci Sequence 16 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610] fibonacci Sequence 17 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987] fibonacci Sequence 18 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597] fibonacci Sequence 19 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584] fibonacci Sequence 20 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181] . Use of extends and super() . /* Tester class method. If this becomes abstract you will not be able to test it directly ... Change this method to call &quot;main&quot; class of each of the extended classes */ static public void main(String[] args) { FiboForLoop fib = new FiboForLoop(); fib.print(); } /* Make new class that extends and defines init() Inside references within this class would change from this to super Repeat process using for, while, recursion */ public class FiboForLoop extends Fibo { public FiboForLoop() { super(); } public FiboForLoop(int nth) { super(nth); } protected void init(){ super.name = &quot;For Loop&quot;; int num1 = 0; int num2 = 1; int num3; for(int i = 0; i &lt;= this.size; i++){ this.setData(num1); /* On each iteration, we are assigning second number * to the first number and assigning the sum of last two * numbers to the second number */ num3 = num1 + num2; num1 = num2; num2 = num3; } } } Fibo.main(null); . Recursion . import java.util.ArrayList; import java.util.HashMap; import java.util.stream.Stream; /* Objective will require changing to abstract class with one or more abstract methods below */ public class Fibo { String name; // name or title of method int size; // nth sequence int hashID; // counter for hashIDs in hash map ArrayList&lt;Long&gt; list; // captures current Fibonacci sequence HashMap&lt;Integer, Object&gt; hash; // captures each sequence leading to final result /* Zero parameter constructor uses Telescoping technique to allow setting of the required value nth @param: none */ public Fibo() { this(20); // telescope to avoid code duplication, using default as 20 } /* Construct the nth fibonacci number @param: nth number, the value is constrained to 92 because of overflow in a long */ public Fibo(int nth) { this.size = nth; this.list = new ArrayList&lt;&gt;(); this.hashID = 0; // starting with index 0 this.hash = new HashMap&lt;&gt;(); // initialize fibonacci and time mvc this.init(); } /* This Method should be &quot;abstract&quot; Leave method as protected, as it is only authorized to extender of the class Make new class that extends and defines init() Inside references within this class would change from this to super Repeat process using for, while, recursion */ protected void init() { this.name = &quot;Stream&quot;; Stream.iterate(new long[]{0, 1}, f -&gt; new long[]{f[1], f[0] + f[1]}) .limit(this.size) .forEach(f -&gt; this.setData(f[0]) ); } /* Number is added to fibonacci sequence, current state of &quot;list&quot; is added to hash for hashID &quot;num&quot; */ public void setData(long num) { list.add(num); hash.put(this.hashID++, list.clone()); } /* Custom Getter to return last element in fibonacci sequence */ public long getNth() { return list.get(this.size - 1); } /* Custom Getter to return last fibonacci sequence in HashMap */ public Object getNthSeq(int i) { return hash.get(i); } /* Console/Terminal supported print method */ public void print() { System.out.println(&quot;Init method = &quot; + this.name); System.out.println(&quot;fibonacci Number &quot; + this.size + &quot; = &quot; + this.getNth()); System.out.println(&quot;fibonacci List = &quot; + this.list); System.out.println(&quot;fibonacci Hashmap = &quot; + this.hash); for (int i=0 ; i&lt;this.size; i++ ) { System.out.println(&quot;fibonacci Sequence &quot; + (i+1) + &quot; = &quot; + this.getNthSeq(i)); } } /* Tester class method. If this becomes abstract you will not be able to test it directly ... Change this method to call &quot;main&quot; class of each of the extended classes */ static public void main(String[] args) { FiboRecursion fib = new FiboRecursion(); fib.print(); } } /* Make new class that extends and defines init() Inside references within this class would change from this to super Repeat process using for, while, recursion */ public class FiboRecursion extends Fibo { protected void init(){ this.name = &quot;While Loop&quot;; int num1 = 0; int num2 = 1; int num3; int i = 0; while(i &lt;= this.size){ this.setData(num1); num3 = num1 + num2; num1 = num2; num2 = num3; i++; } } } Fibo.main(null); . Init method = While Loop fibonacci Number 20 = 4181 fibonacci List = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765] fibonacci Hashmap = {0=[0], 1=[0, 1], 2=[0, 1, 1], 3=[0, 1, 1, 2], 4=[0, 1, 1, 2, 3], 5=[0, 1, 1, 2, 3, 5], 6=[0, 1, 1, 2, 3, 5, 8], 7=[0, 1, 1, 2, 3, 5, 8, 13], 8=[0, 1, 1, 2, 3, 5, 8, 13, 21], 9=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34], 10=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55], 11=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89], 12=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144], 13=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233], 14=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377], 15=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610], 16=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987], 17=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597], 18=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584], 19=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181], 20=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765]} fibonacci Sequence 1 = [0] fibonacci Sequence 2 = [0, 1] fibonacci Sequence 3 = [0, 1, 1] fibonacci Sequence 4 = [0, 1, 1, 2] fibonacci Sequence 5 = [0, 1, 1, 2, 3] fibonacci Sequence 6 = [0, 1, 1, 2, 3, 5] fibonacci Sequence 7 = [0, 1, 1, 2, 3, 5, 8] fibonacci Sequence 8 = [0, 1, 1, 2, 3, 5, 8, 13] fibonacci Sequence 9 = [0, 1, 1, 2, 3, 5, 8, 13, 21] fibonacci Sequence 10 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] fibonacci Sequence 11 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55] fibonacci Sequence 12 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89] fibonacci Sequence 13 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144] fibonacci Sequence 14 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233] fibonacci Sequence 15 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377] fibonacci Sequence 16 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610] fibonacci Sequence 17 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987] fibonacci Sequence 18 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597] fibonacci Sequence 19 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584] fibonacci Sequence 20 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181] . Recursion Example: . public static long fib(long n) { if ((n == 0) || (n == 1)) return n; else return fib(n - 1) + fib(n - 2); } . The method fib() calculates the fibonacci number at position n. If n is equal to 0 or 1, it returns n. Otherwise it recursively calls itself and returns fib(n - 1) + fib(n - 2). . How this assignment fulfills the following standards from College Board . Skill 1.B:Determine code that would be used to complete code segments (ie For, While, Recursion) For Loop: for(int i = 0; i &lt;= this.size; i++){ this.setData(num1); num3 = num1 + num2; num1 = num2; num3 = num3; } . | While Loop: while(i &lt;= this.size){ this.setData(num1); num3 = num1 + num2; num1 = num2; num3 = num3; i++; } . Recursion: public static int fib(int i) { if ((i == 0) || (i == 1)) { return i; } else{ return fib(i - 1) + fib(i - 2); } } . | . | . | Skill 4.C: Determine if two or more code segments yield equivalent results (be sure to Discuss how you know results are the same) All four (stream, for loop, while loop, recursion) yield same results. I know the results are the same because the outputs are the same. Also, forloop, whileloop, and resursion are extended from the fibo class, and everything in fibo class in not changing. | . | Skill 5.A: Describe the behavior of a given segment of program code (describe the difference in recursion versus for &amp; while loops, perhaps add timing to determine speed) . For loop and while loop are pretty similar. While loop is used when you want something to happen as long as or until something else happens. For loop is running as long as a certain condition is evaluating to true. Recursion is used for functions that are based on themselves. It is making a function call itself | public static int fib(int i) { if ((i == 0) || (i == 1)) { . return i; . } else{ return fib(i - 1) + fib(i - 2); } } . The method fib() calculates the fibonacci number at position i. If i is equal to 0 or 1, it returns i. Otherwise it recursively calls itself and returns fib(i - 1) + fib(i - 2). . | . | .",
            "url": "https://lindaliu1202.github.io/lindaliu_blog/jupyter/2022/09/25/fibonacci.html",
            "relUrl": "/jupyter/2022/09/25/fibonacci.html",
            "date": " • Sep 25, 2022"
        }
        
    
  
    
        ,"post23": {
            "title": "JavaScript",
            "content": "Build a Person Function/Class object and JSON . // define function logItType function logItType(output) { console.log(typeof output, &quot;;&quot;, output); //will print out the type of data, semicolon, and the data itself } // define a function to hold data for a Person function Person(name, ghID, age) { this.name = name; this.ghID = ghID; this.age = age; this.role = &quot;&quot;; } // define a setter for role in Person data Person.prototype.setRole = function(role) { //Definition of a prototype allow for the definition of a method associated with the function&lt; this.role = role; } // define a JSON conversion &quot;method&quot; associated with Person Person.prototype.toJSON = function() { const obj = {name: this.name, ghID: this.ghID, age: this.age, role: this.role}; const json = JSON.stringify(obj); // json/string is useful when passing data on internet return json; } // make a new Person and assign to variable student var student = new Person(&quot;Linda&quot;, &quot;LindaLiu1202&quot;, 15); // object type is easy to work with in JavaScript logItType(student); // before role logItType(student.toJSON()); // ok to do this even though role is not yet defined // output of Object and JSON/string associated with Student student.setRole(&quot;Student&quot;); // set the role logItType(student); logItType(student.toJSON()); . object ; Person { name: &#39;Linda&#39;, ghID: &#39;LindaLiu1202&#39;, age: 15, role: &#39;&#39; } string ; {&#34;name&#34;:&#34;Linda&#34;,&#34;ghID&#34;:&#34;LindaLiu1202&#34;,&#34;age&#34;:15,&#34;role&#34;:&#34;&#34;} object ; Person { name: &#39;Linda&#39;, ghID: &#39;LindaLiu1202&#39;, age: 15, role: &#39;Student&#39; } string ; {&#34;name&#34;:&#34;Linda&#34;,&#34;ghID&#34;:&#34;LindaLiu1202&#34;,&#34;age&#34;:15,&#34;role&#34;:&#34;Student&#34;} . Build a Website Array/List of Persons and JSON . function logItType(output) { console.log(typeof output, &quot;;&quot;, output); //will print out the type of data, semicolon, and the data itself } function Person(name, number, age) { this.name = name; this.number = number; this.age = age; this.role = &quot;&quot;; } Person.prototype.setRole = function(role) { //Definition of a prototype allow for the definition of a method associated with the function&lt; this.role = role; } Person.prototype.toJSON = function() { const obj = {name: this.name, number: this.number, age: this.age, role: this.role}; const json = JSON.stringify(obj); // json/string is useful when passing data on internet return json; } var coder = new Person(&quot;Linda&quot;, 8581234567, 15); // object type is easy to work with in JavaScript logItType(coder); // before role logItType(coder.toJSON()); // ok to do this even though role is not yet defined coder.setRole(&quot;Coder&quot;); // set the role logItType(coder); logItType(coder.toJSON()); . object ; Person { name: &#39;Linda&#39;, number: 8581234567, age: 15, role: &#39;&#39; } string ; {&#34;name&#34;:&#34;Linda&#34;,&#34;number&#34;:8581234567,&#34;age&#34;:15,&#34;role&#34;:&#34;&#34;} object ; Person { name: &#39;Linda&#39;, number: 8581234567, age: 15, role: &#39;Coder&#39; } string ; {&#34;name&#34;:&#34;Linda&#34;,&#34;number&#34;:8581234567,&#34;age&#34;:15,&#34;role&#34;:&#34;Coder&#34;} . // define a user Array of Person(s) var users = [ new Person(&quot;Emily&quot;, &quot;8588888888&quot;, 17), new Person(&quot;Alice&quot;, &quot;8583947583&quot;, 19), new Person(&quot;Chloe&quot;, &quot;8583948501&quot;, 18), new Person(&quot;Ann&quot;, &quot;8583749284&quot;, 16), new Person(&quot;Abby&quot;, &quot;8583749843&quot;, 15) ]; // define a website and build Website objects and json function Website(coder, users){ // 1 teacher, many student // start website with Coder this.coder = coder; this.website = [coder]; // add each User to Website this.users = users; this.users.forEach(user =&gt; { user.setRole(&quot;User&quot;); this.website.push(user); }); // build json/string format of Website this.json = []; this.website.forEach(person =&gt; this.json.push(person.toJSON())); } // make a travel webiste from formerly defined coder and users travel = new Website(coder, users); // output of Objects and JSON in Travel website logItType(travel.website); // constructed website object logItType(travel.website[0].name); // abstract 1st objects name logItType(travel.json[0]); // show json conversion of 1st object to string logItType(JSON.parse(travel.json[0])); // show JSON.parse inverse of JSON.stringify . object ; [ Person { name: &#39;Linda&#39;, number: 8581234567, age: 15, role: &#39;Coder&#39; }, Person { name: &#39;Emily&#39;, number: &#39;8588888888&#39;, age: 17, role: &#39;User&#39; }, Person { name: &#39;Alice&#39;, number: &#39;8583947583&#39;, age: 19, role: &#39;User&#39; }, Person { name: &#39;Chloe&#39;, number: &#39;8583948501&#39;, age: 18, role: &#39;User&#39; }, Person { name: &#39;Ann&#39;, number: &#39;8583749284&#39;, age: 16, role: &#39;User&#39; }, Person { name: &#39;Abby&#39;, number: &#39;8583749843&#39;, age: 15, role: &#39;User&#39; } ] string ; Linda string ; {&#34;name&#34;:&#34;Linda&#34;,&#34;number&#34;:8581234567,&#34;age&#34;:15,&#34;role&#34;:&#34;Coder&#34;} object ; { name: &#39;Linda&#39;, number: 8581234567, age: 15, role: &#39;Coder&#39; } . IJavaScript and Table formatting using toHTML method . // define an HTML conversion &quot;method&quot; associated with Webiste Website.prototype._toHtml = function() { // HTML Style is build using inline structure var style = ( &quot;display:inline-block;&quot; + &quot;border: 2px solid white;&quot; + &quot;box-shadow: 0.4em 0.4em 0.4em white;&quot; ); // HTML Body of Table is build as a series of concatenations (+=) var body = &quot;&quot;; // Heading for Array Columns body += &quot;&lt;tr&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Name&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Number&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Age&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Role&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;/tr&gt;&quot;; // Data of Array, iterate through each row of travel.website for (var row in travel.website) { // tr for each row, a new line body += &quot;&lt;tr&gt;&quot;; // td for each column of data body += &quot;&lt;td&gt;&quot; + travel.website[row].name + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + travel.website[row].number + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + travel.website[row].age + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + travel.website[row].role + &quot;&lt;/td&gt;&quot;; // tr to end line body += &quot;&lt;tr&gt;&quot;; } // Build and HTML fragment of div, table, table body return ( &quot;&lt;div style=&#39;&quot; + style + &quot;&#39;&gt;&quot; + &quot;&lt;table&gt;&quot; + body + &quot;&lt;/table&gt;&quot; + &quot;&lt;/div&gt;&quot; ); }; // IJavaScript HTML processor receive parameter of defined HTML fragment $$.html(travel._toHtml()); . NameNumberAgeRole . Linda | 8581234567 | 15 | Coder | Emily | 8588888888 | 17 | User | Alice | 8583947583 | 19 | User | Chloe | 8583948501 | 18 | User | Ann | 8583749284 | 16 | User | Abby | 8583749843 | 15 | User | &lt;/table&gt;&lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; Team Project (travel website) Itinerary Table . function logItType(output) { console.log(typeof output, &quot;;&quot;, output); //will print out the type of data, semicolon, and the data itself } function Time(start, destination, end) { this.start = start; this.destination = destination; this.end = end; this.month = &quot;&quot;; } Time.prototype.setMonth = function(month) { //Definition of a prototype allow for the definition of a method associated with the function&lt; this.month = month; } Time.prototype.toJSON = function() { const obj = {start: this.start, destination: this.destination, end: this.end, role: this.role}; const json = JSON.stringify(obj); // json/string is useful when passing data on internet return json; } var august = new Time(&quot;8/20&quot;, &quot;Los Angeles&quot;, &quot;8/22&quot;); // object type is easy to work with in JavaScript august.setMonth(&quot;August&quot;); // set the role // define a user Array of Person(s) var septembers = [ new Time(&quot;9/5&quot;, &quot;China&quot;, &quot;9/30&quot;), new Time(&quot;9/17&quot;, &quot;Hawii&quot;, &quot;9/20&quot;), new Time(&quot;9/21&quot;, &quot;Japan&quot;, &quot;9/27&quot;), new Time(&quot;9/23&quot;, &quot;Korea&quot;, &quot;9/29&quot;), new Time(&quot;9/25&quot;, &quot;New York&quot;, &quot;9/28&quot;) ]; // define a website and build Website objects and json function Itinerary(august, septembers){ // 1 teacher, many student // start website with Coder august.setMonth(&quot;August&quot;); this.august = august; this.itinerary = [august]; // add each User to Website this.septembers = septembers; this.septembers.forEach(september =&gt; { september.setMonth(&quot;September&quot;); this.itinerary.push(september); }); // build json/string format of Website this.json = []; this.itinerary.forEach(time =&gt; this.json.push(time.toJSON())); } // make a travel webiste from formerly defined coder and users travel = new Itinerary(august, septembers); // define an HTML conversion &quot;method&quot; associated with Webiste Itinerary.prototype._toHtml = function() { // HTML Style is build using inline structure var style = ( &quot;display:inline-block;&quot; + &quot;border: 2px solid white;&quot; + &quot;background-color: white;&quot; + &quot;color: black;&quot; ); console.log(&quot;Itinerary Example&quot;) // HTML Body of Table is build as a series of concatenations (+=) var body = &quot;&quot;; // Heading for Array Columns body += &quot;&lt;tr&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Start Date&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Destination&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;End Date&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Month&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;/tr&gt;&quot;; // Data of Array, iterate through each row of travel.itinerary for (var row in travel.itinerary) { // tr for each row, a new line body += &quot;&lt;tr&gt;&quot;; // td for each column of data body += &quot;&lt;td&gt;&quot; + travel.itinerary[row].start + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + travel.itinerary[row].destination + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + travel.itinerary[row].end + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + travel.itinerary[row].month + &quot;&lt;/td&gt;&quot;; // tr to end line body += &quot;&lt;tr&gt;&quot;; } // Build and HTML fragment of div, table, table body return ( &quot;&lt;div style=&#39;&quot; + style + &quot;&#39;&gt;&quot; + &quot;&lt;table&gt;&quot; + body + &quot;&lt;/table&gt;&quot; + &quot;&lt;/div&gt;&quot; ); }; // IJavaScript HTML processor receive parameter of defined HTML fragment $$.html(travel._toHtml()); . Itinerary Example . Start DateDestinationEnd DateMonth . 8/20 | Los Angeles | 8/22 | August | 9/5 | China | 9/30 | September | 9/17 | Hawii | 9/20 | September | 9/21 | Japan | 9/27 | September | 9/23 | Korea | 9/29 | September | 9/25 | New York | 9/28 | September | &lt;/table&gt;&lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; . . . .",
            "url": "https://lindaliu1202.github.io/lindaliu_blog/jupyter/2022/09/22/javascript.html",
            "relUrl": "/jupyter/2022/09/22/javascript.html",
            "date": " • Sep 22, 2022"
        }
        
    
  
    
        ,"post24": {
            "title": "Iteration with 2D Array",
            "content": "Change or add data to the 2D arrays . Apple 1 . /** * Class for apples: a 2D array of apples * As well as method to print the Poem */ class AppleLoop { String [][] apples; /** * Constructor initializes a 2D array of apples */ public AppleLoop() { //Storing Data in 2D arrays apples = new String[][]{ //Apple 0 { &quot; ,--./,-. &quot;, //[0][0] &quot; / | &quot;, //[0][1] &quot; | | &quot;, //[0][2] &quot; | / &quot;, //[0][3] &quot; `._,._,&#39; &quot; //[0][4] }, //Apple 1 { &quot; ,--./,-. &quot;, //[1][0] &quot; / # | &quot;, //[1][1] &quot; | | &quot;, //[1][2] &quot; | / &quot;, //[1][3] &quot; `._,._,&#39; &quot; //[1][4] }, //Apple 2 { &quot; ,--./,-. &quot;, &quot; / # | &quot;, &quot; | @ | &quot;, &quot; | / &quot;, &quot; `._,._,&#39; &quot; }, //Apple 3 { &quot; ,--|,-(~) &quot;, //[3][0] &quot; / # )=) &quot;, &quot; ( (_/ ) &quot;, &quot; | / &quot;, &quot; `._,._,&#39; &quot; }, //Apple 4 { &quot; ,--./,-. &quot;, //[4][0] &quot; /,-._.--~| &quot;, &quot; __} {__ &quot;, &quot; |`-._,-`-, &quot;, &quot; `._,._,&#39; &quot; }, }; } public void printPoem() { System.out.println(); System.out.println(&quot;You forget to eat your apple, what will happen?&quot;); System.out.println(); int appleCount = apples.length; //.length number of rows int row = 0; //not included in for loop for (int i = 4; i &lt; appleCount &amp;&amp; i != -1; i--) //i != -1 because we want to stop the for loop after printing the fifth apple, and we starts with i = 4, so we need to stop when i is =-1 { System.out.println(&quot;The apple:&quot;); System.out.println(&quot; &quot;); for (int col = 0; col &lt; apples[row].length; col++) { // prints specific part of the apple from the column when row is 0/1/2/3/4 System.out.print(apples[row][col] + &quot; &quot;); //this is new line between separate parts System.out.println(); } row += 1; // print everything that&#39;s on row 1/2/3/4, which are Apple 1/2/3/4 System.out.println(); } //finishing messages System.out.println(&quot;This is the story of an uneaten apple.&quot;); System.out.println(&quot;0000000000000000000000000000000000&quot;); System.out.println(&quot; THE END &quot;); } /** * A Java Driver/Test method that is the entry point for execution */ public static void main(String[] args) { new AppleLoop().printPoem(); //a new apple list and output in one step } } AppleLoop.main(null); . You forget to eat your apple, what will happen? The apple: ,--./,-. / | | | | / `._,._,&#39; The apple: ,--./,-. / # | | | | / `._,._,&#39; The apple: ,--./,-. / # | | @ | | / `._,._,&#39; The apple: ,--|,-(~) / # )=) ( (_/ ) | / `._,._,&#39; The apple: ,--./,-. /,-._.--~| __} {__ |`-._,-`-, `._,._,&#39; This is the story of an uneaten apple. 0000000000000000000000000000000000 THE END . Print apples horizontally . Version 1 - changing data in the 2d array . /** * Class for apples: a 2D array of apples * As well as method to print the Poem */ class AppleLoop { String [][] apples; /** * Constructor initializes a 2D array of apples */ public AppleLoop() { //Storing Data in 2D arrays apples = new String[][]{ { &quot; ,--./,-. &quot;, //[0][0] &quot; ,--./,-. &quot;, //[0][1] &quot; ,--./,-. &quot;, //[0][2] &quot; ,--|,-(~) &quot;, //[0][3] &quot; ,--./,-. &quot; //[0][4] }, { &quot; / | &quot;, //[1][0] &quot; / # | &quot;, &quot; / # | &quot;, &quot; / # )=) &quot;, &quot; /,-._.--~| &quot; }, { &quot; | | &quot;, //[2][0] &quot; | | &quot;, &quot; | @ | &quot;, &quot; ( (_/ ) &quot;, &quot; __} {__ &quot; }, { &quot; | / &quot;, //[3][0] &quot; | / &quot;, &quot; | / &quot;, &quot; | / &quot;, &quot; |`-._,-`-, &quot; }, { &quot; `._,._,&#39; &quot;, //[4][0] &quot; `._,._,&#39; &quot;, &quot; `._,._,&#39; &quot;, &quot; `._,._,&#39; &quot;, &quot; `._,._,&#39; &quot; }, }; } public void printPoem() { System.out.println(); System.out.println(&quot;You forget to eat your apple, what will happen?&quot;); System.out.println(); System.out.println(&quot;The apple:&quot;); System.out.println(&quot; &quot;); int appleCount = apples.length; //.length number of rows int row = 0; //not included in for loop for (int i = 4; i &lt; appleCount &amp;&amp; i != -1; i--) { for (int col = 0; col &lt; apples[row].length; col++) { // prints specific part of the apple from the column System.out.print(apples[row][col] + &quot; &quot;); } row += 1; //printing second/third/fourth/fifth row System.out.println(); //break between each row } System.out.println(); // break between apples and the final messages //finishing messages System.out.println(&quot;This is the story of an uneaten apple.&quot;); System.out.println(&quot;0000000000000000000000000000000000&quot;); System.out.println(&quot; THE END &quot;); } /** * A Java Driver/Test method that is the entry point for execution */ public static void main(String[] args) { new AppleLoop().printPoem(); //a new apple list and output in one step } } AppleLoop.main(null); . You forget to eat your apple, what will happen? The apple: ,--./,-. ,--./,-. ,--./,-. ,--|,-(~) ,--./,-. / | / # | / # | / # )=) /,-._.--~| | | | | | @ | ( (_/ ) __} {__ | / | / | / | / |`-._,-`-, `._,._,&#39; `._,._,&#39; `._,._,&#39; `._,._,&#39; `._,._,&#39; This is the story of an uneaten apple. 0000000000000000000000000000000000 THE END . Version 2 - without changing data in the 2d array . /** * Class for apples: a 2D array of apples * As well as method to print the Poem */ class AppleLoop { String [][] apples; /** * Constructor initializes a 2D array of apples */ public AppleLoop() { //Storing Data in 2D arrays apples = new String[][]{ //Apple 0 { &quot; ,--./,-. &quot;, //[0][0] &quot; / | &quot;, //[0][1] &quot; | | &quot;, //[0][2] &quot; | / &quot;, //[0][3] &quot; `._,._,&#39; &quot; //[0][4] }, //Apple 1 { &quot; ,--./,-. &quot;, //[1][0] &quot; / # | &quot;, //[1][1] &quot; | | &quot;, //[1][2] &quot; | / &quot;, //[1][3] &quot; `._,._,&#39; &quot; //[1][4] }, //Apple 2 { &quot; ,--./,-. &quot;, &quot; / # | &quot;, &quot; | @ | &quot;, &quot; | / &quot;, &quot; `._,._,&#39; &quot; }, //Apple 3 { &quot; ,--|,-(~) &quot;, //[3][0] &quot; / # )=) &quot;, &quot; ( (_/ ) &quot;, &quot; | / &quot;, &quot; `._,._,&#39; &quot; }, //Apple 4 { &quot; ,--./,-. &quot;, //[4][0] &quot; /,-._.--~| &quot;, &quot; __} {__ &quot;, &quot; |`-._,-`-, &quot;, &quot; `._,._,&#39; &quot; }, }; } public void printPoem() { System.out.println(); System.out.println(&quot;You forget to eat your apple, what will happen?&quot;); System.out.println(); System.out.println(&quot;The apple:&quot;); System.out.println(&quot; &quot;); int appleCount = apples.length; //.length number of rows int col = 0; //change row to col for (int i = 4; i &lt; appleCount &amp;&amp; i != -1; i--) //i != -1 because we want to stop the for loop after printing the fifth apple, and we starts with i = 4, so we need to stop when i is =-1 { for (int row = 0; row &lt; apples.length; row++) { //change col to row // prints specific part of the apple from the column when row is 0/1/2/3/4 System.out.print(apples[row][col] + &quot; &quot;); //this is new line between separate parts System.out.print(&quot; t&quot;); //tab between each heads of the apples instead of break } col += 1; // print everything that&#39;s on col 1/2/3/4 System.out.println(); //break between the heads/necks...different parts of the apples } System.out.println(); //finishing messages System.out.println(&quot;This is the story of an uneaten apple.&quot;); System.out.println(&quot;0000000000000000000000000000000000&quot;); System.out.println(&quot; THE END &quot;); } /** * A Java Driver/Test method that is the entry point for execution */ public static void main(String[] args) { new AppleLoop().printPoem(); //a new apple list and output in one step } } AppleLoop.main(null); . You forget to eat your apple, what will happen? The apple: ,--./,-. ,--./,-. ,--./,-. ,--|,-(~) ,--./,-. / | / # | / # | / # )=) /,-._.--~| | | | | | @ | ( (_/ ) __} {__ | / | / | / | / |`-._,-`-, `._,._,&#39; `._,._,&#39; `._,._,&#39; `._,._,&#39; `._,._,&#39; This is the story of an uneaten apple. 0000000000000000000000000000000000 THE END . Version 3 - not changing the 2d array . /** * Class for apples: a 2D array of apples * As well as method to print the Poem */ class AppleLoop { String [][] apples; /** * Constructor initializes a 2D array of apples */ public AppleLoop() { //Storing Data in 2D arrays apples = new String[][]{ //Apple 0 { &quot; ,--./,-. &quot;, //[0][0] &quot; / | &quot;, //[0][1] &quot; | | &quot;, //[0][2] &quot; | / &quot;, //[0][3] &quot; `._,._,&#39; &quot; //[0][4] }, //Apple 1 { &quot; ,--./,-. &quot;, //[1][0] &quot; / # | &quot;, //[1][1] &quot; | | &quot;, //[1][2] &quot; | / &quot;, //[1][3] &quot; `._,._,&#39; &quot; //[1][4] }, //Apple 2 { &quot; ,--./,-. &quot;, &quot; / # | &quot;, &quot; | @ | &quot;, &quot; | / &quot;, &quot; `._,._,&#39; &quot; }, //Apple 3 { &quot; ,--|,-(~) &quot;, //[3][0] &quot; / # )=) &quot;, &quot; ( (_/ ) &quot;, &quot; | / &quot;, &quot; `._,._,&#39; &quot; }, //Apple 4 { &quot; ,--./,-. &quot;, //[4][0] &quot; /,-._.--~| &quot;, &quot; __} {__ &quot;, &quot; |`-._,-`-, &quot;, &quot; `._,._,&#39; &quot; }, }; } public void printPoem() { System.out.println(); System.out.println(&quot;You forget to eat your apple, what will happen?&quot;); System.out.println(); System.out.println(&quot;The apple:&quot;); System.out.println(&quot; &quot;); int appleCount = apples.length; //.length number of rows int row = 0; //not included in for loop for (int i = 4; i &lt; appleCount &amp;&amp; i != -1; i--) //i != -1 because we want to stop the for loop after printing the fifth apple, and we starts with i = 4, so we need to stop when i is =-1 { for (int col = 0; col &lt; apples[row].length; col++) { // prints specific part of the apple from the column when row is 0/1/2/3/4 System.out.print(apples[col][row] + &quot; &quot;); //switch col and row //this is new line between separate parts System.out.print(&quot; &quot;); } row += 1; // print everything that&#39;s on row 1/2/3/4, which are Apple 1/2/3/4 System.out.println(); } //finishing messages System.out.println(&quot;This is the story of an uneaten apple.&quot;); System.out.println(&quot;0000000000000000000000000000000000&quot;); System.out.println(&quot; THE END &quot;); } /** * A Java Driver/Test method that is the entry point for execution */ public static void main(String[] args) { new AppleLoop().printPoem(); //a new apple list and output in one step } } AppleLoop.main(null); . You forget to eat your apple, what will happen? The apple: ,--./,-. ,--./,-. ,--./,-. ,--|,-(~) ,--./,-. / | / # | / # | / # )=) /,-._.--~| | | | | | @ | ( (_/ ) __} {__ | / | / | / | / |`-._,-`-, `._,._,&#39; `._,._,&#39; `._,._,&#39; `._,._,&#39; `._,._,&#39; This is the story of an uneaten apple. 0000000000000000000000000000000000 THE END . Display backwards . Apple 2 . /** * Class for apples: a 2D array of apples * As well as method to print the Poem */ class AppleLoop { String [][] apples; /** * Constructor initializes a 2D array of apples */ public AppleLoop() { //Storing Data in 2D arrays apples = new String[][]{ //Apple 0 { &quot; ,--./,-. &quot;, //[0][0] &quot; / | &quot;, //[0][1] &quot; | | &quot;, //[0][2] &quot; | / &quot;, //[0][3] &quot; `._,._,&#39; &quot; //[0][4] }, //Apple 1 { &quot; ,--./,-. &quot;, //[1][0] &quot; / # | &quot;, //[1][1] &quot; | | &quot;, //[1][2] &quot; | / &quot;, //[1][3] &quot; `._,._,&#39; &quot; //[1][4] }, //Apple 2 { &quot; ,--./,-. &quot;, &quot; / # | &quot;, &quot; | @ | &quot;, &quot; | / &quot;, &quot; `._,._,&#39; &quot; }, //Apple 3 { &quot; ,--|,-(~) &quot;, //[3][0] &quot; / # )=) &quot;, &quot; ( (_/ ) &quot;, &quot; | / &quot;, &quot; `._,._,&#39; &quot; }, //Apple 4 { &quot; ,--./,-. &quot;, //[4][0] &quot; /,-._.--~| &quot;, &quot; __} {__ &quot;, &quot; |`-._,-`-, &quot;, &quot; `._,._,&#39; &quot; }, }; } public void printPoem() { System.out.println(); System.out.println(&quot;You forget to eat your apple, what will happen?&quot;); System.out.println(); int appleCount = apples.length; //.length number of rows int appleNum = 1; for (int i = 4; i &lt; appleCount &amp;&amp; i != -1; i--) { System.out.println(&quot;The apple:&quot;); System.out.println(&quot; &quot;); for (int row = 0; row &lt; appleNum; row++) { //if appleNum += 1 once, then 0(row) &lt; 2(1+1), will print Apple 0 &amp; 1 for (int col = 0; col &lt; apples[row].length; col++) { // prints specific part of the apple from the column System.out.print(apples[row][col] + &quot; &quot;); //this is new line between separate parts System.out.println(); } System.out.println(); } appleNum += 1; } //finishing messages System.out.println(&quot;This is the story of an uneaten apple.&quot;); System.out.println(&quot;0000000000000000000000000000000000&quot;); System.out.println(&quot; THE END &quot;); } /** * A Java Driver/Test method that is the entry point for execution */ public static void main(String[] args) { new AppleLoop().printPoem(); //a new apple list and output in one step } } AppleLoop.main(null); . You forget to eat your apple, what will happen? The apple: ,--./,-. / | | | | / `._,._,&#39; The apple: ,--./,-. / | | | | / `._,._,&#39; ,--./,-. / # | | | | / `._,._,&#39; The apple: ,--./,-. / | | | | / `._,._,&#39; ,--./,-. / # | | | | / `._,._,&#39; ,--./,-. / # | | @ | | / `._,._,&#39; The apple: ,--./,-. / | | | | / `._,._,&#39; ,--./,-. / # | | | | / `._,._,&#39; ,--./,-. / # | | @ | | / `._,._,&#39; ,--|,-(~) / # )=) ( (_/ ) | / `._,._,&#39; The apple: ,--./,-. / | | | | / `._,._,&#39; ,--./,-. / # | | | | / `._,._,&#39; ,--./,-. / # | | @ | | / `._,._,&#39; ,--|,-(~) / # )=) ( (_/ ) | / `._,._,&#39; ,--./,-. /,-._.--~| __} {__ |`-._,-`-, `._,._,&#39; This is the story of an uneaten apple. 0000000000000000000000000000000000 THE END .",
            "url": "https://lindaliu1202.github.io/lindaliu_blog/jupyter/2022/09/14/iteration_2dArray.html",
            "relUrl": "/jupyter/2022/09/14/iteration_2dArray.html",
            "date": " • Sep 14, 2022"
        }
        
    
  
    
        ,"post25": {
            "title": "Focus and Habits",
            "content": "“Psychology and the Good Life” . It’s nothing if you only know the good psychology and the good life without taking actions. | Exercise and sleep are important to maintain a good psychology and good life, and it is more important to put them in actions. This relates to me personally because I lack exercise and sleep due to procrastination and not taking action although I know the important of sleep and exercise. | Set up goals for when to sleep and exercise. | . | . Gratitude List . my family my mom | . | my friends emily | ally | enze | max | . | my teachers | . i am grateful for my family, my friends, and all of my teachers. Especially, I want to thank my mom for supporting me in studying and helping me when I encountered problems. She won’t force me to do things that I don’t like and is always supportive of my interests and hobbies. I want to thank my friend Ally for supporting me when I got into the drama/conflict last time, and I learned a lot from her. I am also grateful for my friend Emily because we can complain or talk about anything with each other without any worries, which I am very thankful to have a friend like her. . . Goals . In order to get enough sleep and exercise to maintain a healthy and good life Goal 1 - go to sleep at 12am everyday | Goal 2 - learn a new dance every weekend (exercise) . | I would be a more happy person after acheving and maintaining these goals because my mom usually would be mad at me if I stayed up really late, and also staying up late is making me sleepy during classes and is bad for my health. | Dancing is also a great way of getting exercise, and also it’s something that I like to do. | . | .",
            "url": "https://lindaliu1202.github.io/lindaliu_blog/markdown/2022/09/11/focus_habits.html",
            "relUrl": "/markdown/2022/09/11/focus_habits.html",
            "date": " • Sep 11, 2022"
        }
        
    
  
    
        ,"post26": {
            "title": "Boolean Expressions and If Statements",
            "content": "Explain if, if-else, and if-elseif-else . The if/else statement extends the if statement by specifying an action if the if (true/false expression) is false. . With the if statement, a program will execute the true code block or do nothing. With the if/else statement, the program will execute either the true code block or the false code block so something is always executed with an if/else statement. . if statement example: . // if (score &gt;= 90) // grade = &#39;A&#39;; int score = 92; if (score &gt;= 90) System.out.print(&quot;A&quot;); . A . if-else statement example: . int a = 1; if (a &gt;= 0) System.out.print(&quot;Number is positive n&quot;); else System.out.print(&quot;Number is negative n&quot;); . Number is positive . if else if statement example: . The if/else if statement allows you to create a chain of if statements. The if statements are evaluated in order until one of the if expressions is true or the end of the if/else if chain is reached. If the end of the if/else if chain is reached without a true expression, no code blocks are executed. . if (condition) { multiple statements } else single statement . if (condition) { multiple statements } else { multiple statements } . elseif statement example: . elseif, as its name suggests, is a combination of if and else. Like else, it extends an if statement to execute a different statement in case the original if expression evaluates to false. However, unlike else, it will execute that alternative expression only if the elseif conditional expression evaluates to true. . int a = 1; int b = 2; if (a &gt; b) { System.out.print(&quot;a is bigger than b&quot;); } else if (a == b) { System.out.print(&quot;a is equal to b&quot;); } else { System.out.print(&quot;a is smaller than b&quot;); } . a is smaller than b . Add to lesson switch-case . Create and if-elseif-elseif-elseif-else statement, 5 or more conditions. | Covert the 5 or more decisions to a switch-case-case-case-case-otherwise. | Make a markdown block before each code example | Comment/establish a style of comments for your if-elseif and switch-case code blocks | . Attempt to create an if-elseif-elseif-elseif-else statement, 5 or more conditions, but failed . // attempt to create an if-elseif-elseif-elseif-else statement, 5 or more conditions, but failed int a = 1; int b = 2; int c = 3; if (a &gt; b &amp;&amp; a &gt; c) { // &amp;&amp; means and System.out.print(&quot;a is the largest number&quot;); } else if (b &gt; c &amp;&amp; b &gt; a) { System.out.print(&quot;b is the largest number&quot;); } else if (c &gt; b &amp; c &gt; a) { System.out.print(&quot;c is the largest number&quot;); } . c is the largest number . Create and if-elseif-elseif-elseif-else statement, 5 or more conditions. . Example 1: . //Create and if-elseif-elseif-elseif-else statement, 5 or more conditions. //Example 1 int grade = 77; if (grade &gt;= 90){ System.out.print(&quot;Amazing job! You got an A&quot;); } else if (grade &gt;= 80){ System.out.print(&quot;Good! You got a B&quot;); } else if (grade &gt;= 70){ System.out.print(&quot;Need to work harder! You got a C&quot;); } else if (grade &gt;= 60){ System.out.print(&quot;Ah oh. You should put more effort. You got a D&quot;); } else { System.out.print(&quot;:(&quot;); } . Need to work harder! You got a C . Create and if-elseif-elseif-elseif-else statement, 5 or more conditions. . Example 2: . // Create and if-elseif-elseif-elseif-else statement, 5 or more conditions. // Example 2 int day = 5; if (day == 7){ System.out.println(&quot;Sunday&quot;); } else if (day == 1) { System.out.println(&quot;Monday&quot;); } else if (day == 2) { System.out.println(&quot;Tuesday&quot;); } else if (day == 3) { System.out.println(&quot;Wednesday&quot;); } else if (day == 4) { System.out.println(&quot;Thursday&quot;); } else if (day == 5) { System.out.println(&quot;Friday&quot;); } else { System.out.println(&quot;Saturday&quot;); } . Friday . Covert the 5 or more decisions to a switch-case-case-case-case-otherwise. . Switch Case for Example 2: . // Covert the 5 or more decisions to a switch-case-case-case-case-otherwise. // For example 2 int day = 5; switch(day) { //switch between the day variable case 7: System.out.println (&quot;Sunday&quot;); // if day=7, do this line of code break; case 1: System.out.println (&quot;Monday&quot;); // if day=1, do this line of code break; case 2: System.out.println(&quot;Tuesday&quot;); break; case 3: System.out.println (&quot;Wednesday&quot;); break; case 4: System.out.println(&quot;Thursday&quot;); break; case 5: System.out.println(&quot;Friday&quot;); break; case 6: System.out.println (&quot;Saturday&quot;); break; } . Friday . Finish lesson with De Morgan&#39;s law . Describe De Morgan&#39;s law | Illustrate De Morgan&#39;s law | Show some code running that shows understanding | . Describe De Morgan&#39;s law . ccording to De Morgan&#39;s Law, the complement of the union of two sets will be equal to the intersection of their individual complements. Likewise, the complement of the intersection of two sets will be equal to the union of their individual complements. . Example: !(a || b) == !a &amp;&amp; !b not (A or B) = not A and not B &quot;I don&#39;t like chocolate or vanilla&quot; = &quot;I do not like chocolate and I do not like vanilla&quot; . They show how to handle the negation of a complex conditional, which is a conditional statement with more than one condition joined by an and (&amp;&amp;) or or (||), such as (x &lt; 3) &amp;&amp; (y &gt; 2). . The negation modifies each conditional as shown below. . &lt; becomes &gt;= . &quot;&gt; becomes &lt;=&quot; . == becomes != . &lt;= becomes &gt; . &quot;&gt;= becomes &lt;&quot; . != becomes == . Illustrate De Morgan&#39;s law . . Example: . !(a || b) == !a &amp;&amp; !b . not (A or B) = not A and not B . &quot;I don&#39;t like chocolate or vanilla&quot; = &quot;I do not like chocolate and I do not like vanilla&quot; . . Show some code running that shows understanding . // using De Morgan&#39;s Law, outputs are the same int x = 2; int y = 2; System.out.println(!(x &lt; 3 &amp;&amp; y &gt; 2)); System.out.println(x &gt;= 3 || y &lt;= 2); // &lt; becomes &gt;=; &gt; becomes &lt;=; and &amp;&amp; becomes || . true true . // if not use De Morgan&#39;s Law correctly, you will get different outputs int x = 2; int y = 2; System.out.println(!(x &lt; 3 &amp;&amp; y &gt; 2)); System.out.println(x &gt;= 3 || y &lt; 2); // &gt; should become &lt;= . true false .",
            "url": "https://lindaliu1202.github.io/lindaliu_blog/jupyter/2022/09/09/if_else_lesson.html",
            "relUrl": "/jupyter/2022/09/09/if_else_lesson.html",
            "date": " • Sep 9, 2022"
        }
        
    
  
    
        ,"post27": {
            "title": "My Story with Dancing",
            "content": "Hi!! Welcome! :) This is my story with dancing… My dance journey began when I was in a kindergarten in China. The first dance I learned was Latin dance and I took dance classes for many years and participated in several competitions and performances. . . After I became an elementary school student, I joined the school dance team in second grade. I remember auditioning for the dance team and the choir, and in the end, between the choir and the dance team, I chose to be on the dance team. In the school dance team, we trained and practiced dances every day before school and after school. We danced various types of dances, such as tap dance, Xinjiang dance, traditional Chinese dance and contemporary dance. It was a very fun and memorable experience. All of my teammates were very nice and I made a lot of friends and grew a lot as a dancer. I actually went to Australia and Hawaii with my team during the summer and we performed Xinjiang and contemporary dances. It was my first time going abroad (without my parents) and we went to visit many famous buildings and sites in Australia and Hawaii. . . . . In fourth and fifth grade, I took a super intense Chinese dance class outside of school to prepare for admission to a good middle school. I cried in almost every class when we were doing the super intense stretching for the first few weeks. We needed to learn all these dance techniques and flips, and I was really scared to do them, but I at least kept trying and really grew a lot and became very flexible. . . . However, unexpectedly, in 2018, when I became a sixth grader, I came to the U.S. to study and I didn’t tell my friends at school about it. The first year of studying abroad was indeed very tough. I lived with my brother and my friend in a host family and we needed to wake up very early because the school was quite far from my host family’s house and it was a small, private Christian school. Anyway, because of all of these factors, I stopped dancing, singing and playing the piano after I came to America. A year later, I transferred to another larger private Christian school and my family bought a house near the school. I tried jazz classes at a local dance studio, but to be honest, I didn’t like it and it wasn’t what I was looking for. I joined the school’s dance team for a year. I was still looking for the type of dancing I wanted to do. In the same year, I got into Kpop. I wanted to do Kpop dance, but it was really hard to find places that taught Kpop dance in San Diego. In 10th grade, I transferred to Del Norte. The summer before I transferred, my mom and I found a teacher who started a Kpop dance class, so I started going to that class and I loved it. The funny thing is that in my first Kpop dance class, we learned How You Like That by BLACKPINK and I ended up going home and not feeling my legs until the next day and I couldn’t move my legs because I hadn’t really danced in a long time. I am still taking the class until now, but I still want to try other dances such as HipHop dance or contemporary dance. I went to a HipHop dance camp this summer and it was intense but also fun at the same time because I found it challenging. . . . In fact, I’ve always wanted to make videos, whether it’s dance videos, singing videos or vlogs, but I haven’t really made the decision to start making them because I always feel like I’m not ready. This summer, I started making dance cover videos and posting them on YouTube and Bilibili! link to my YouTube channel . . . I’ve had the idea since 10th grade to create a Kpop dance club because I want to find a group of people who also like Kpop dance and that we can make dance cover videos together, and I have made up my mind to actually create this club this year. However, due to some reasons and conflicts, a Kpop dance club was created before me, so I couldn’t create the Kpop dance club I always wanted to create. But I still want to try, so now I am applying to create an Asian pop culture club where we can make singing and dancing videos of Kpop, Cpop, Jpop, etc, which I think it’s better than just a Kpop dance club because now I can do other types of dance from different Asian countries and not only dance but also sing, so now there are more options! My story with dance is still continuing and I’m looking forward to trying more types of dance in the future! . . Newest Dance Cover Video on my YouTube Channel: .",
            "url": "https://lindaliu1202.github.io/lindaliu_blog/markdown/2022/09/06/mystory_dancing.html",
            "relUrl": "/markdown/2022/09/06/mystory_dancing.html",
            "date": " • Sep 6, 2022"
        }
        
    
  
    
        ,"post28": {
            "title": "Code.org Key Learnings",
            "content": "Use of extends (from lesson 6) . inheritance - an object-oriented programming principle where a subclass inherits the attributes and behaviors of a superclass | subclass - a class that extends a superclass and inherits its attributes and behaviors | superclass - a class that can be extended to create subclasses | . Club Example . public class ClubOfficer extends ClubMember { //extends tells java that ClubOfficer class should inherit the attributes and behaviors of ClubMember class public ClubOfficer() { //subclass constructor super(); //to call the superclass constructor in subclass } } . | public class ClubOfficer extends ClubMember { //extends tells java that ClubOfficer class should inherit the attributes and behaviors of ClubMember class | public ClubOfficer() { //subclass constructor | super(); //to call the superclass constructor in subclass | } | } Unresolved dependencies: - class ClubMember . PainterPlus Example . public class PainterPlus extends Painter { public PainterPlus() { super(); } } . Creating PainterPlus . Instantiate a PainterPlus object called myPainterPlus | sytax: ClassName objectName = new ClassName(); | . public class MyNeighborhood { public static void main(String[] args) { // Lesson 6 Level 3 // TO DO #1: Instantiate a PainterPlus object. PainterPlus myPainterPlus = new PainterPlus(); } } . Creating Objects . An object is instantiated using the following syntax: . ClassName objectName = new ClassName(); . Example: . public class MyNeighborhood { public static void main(String[] args) { // TO DO #1: Instantiate a Painter object called myPainter. Painter myPainter = new Painter(); myPainter.move(); } } . Using Objects . We can use methods to nevigate the object. . For example, for the myPainter object, we can use the move() and turnLeft() methods to navigate the myPainter object to the traffic cone. . A method is called using the following syntax: . variableName.methodName(); OR variableName.methodName(argument); . Example: . myPainterPlus.turnRight(); . A method signature for a void method uses the following syntax: . public void methodName() { // code to execute when the method is called } . Example: . public void turnRight() { turnLeft(); turnLeft(); turnLeft(); } . Lesson 8 . Purpose of the // and / / is to add comments to explain the function of the code . The Backpack allows you to save classes that you create so you can import them into other projects. | . Lesson 9 . control structure - a conditional or iteration statement which affects the flow of a program | iteration statement (loop) - a control structure that repeatedly executes a block of code | while loop - a control structure which executes a block of code repeatedly as long as a condition is true | . A while loop uses the following syntax: . while (condition) { // code to execute while the condition is true } . Example: (in PainterPlus.java) . public void takeAllPaint() { while (isOnBucket()){ takePaint(); } } public void paintLine() { while (hasPaint()) { paint(&quot;white&quot;); move(); } } . Lesson 10 . NOT ( ! ) operator - a logical operator that returns true when the operand is false and returns false when the operand is true | if-else statement (two-way selection statement) - specifies a block of code to execute when the condition is true and a block of code to execute when the condition is false | logical operator - an operator that returns a Boolean value | . An if-else statement uses the following syntax: . if (condition) { // code to execute if the condition is true } else { // code to execute if the condition is false } . Problem: can&#39;t run the code if there is { after else . public void moveOrTakePaint(){ while (canMove()) { if (!isOnBucket()) { move(); } else { takeAllPaint(); } } . code is working if there is no { after else . public void moveOrTakePaint(){ while (canMove()) { if (!isOnBucket()) { move(); } else takeAllPaint(); } } . Update: . public void moveSouth() { while (canMove(&quot;south&quot;)) { if (!isFacingSouth()){ turnRight(); } else { move(); } } } . Lesson 11 . concatenation - joining two strings together | . Printing to the console uses the following syntax: . System.out.print(); . OR . System.out.println(); . System.out.print() - leaves the cursor at the end of the line that it printed | System.out.println() - to print a line of text and then move the cursor to the next line | . Problem: Inside the printStatus() method, write the code to print information about the state of a PainterPlus object . My code: . public void printStatus() { System.out.println(); } . how to print the state of the object?? . public void printStatus() { System.out.println(&quot;Paint: &quot; + getMyPaint()); System.out.println(&quot;X Location: &quot; + getX()); System.out.println(&quot;Y Location: &quot; + getY()); System.out.println(&quot;Direction: &quot; + getDirection()); } . Lesson 12 . Method Decomposition - the process of breaking a problem down into smaller parts to write methods for each part | edge case - a bug that occurs at the highest or lowest end of a range of possible values or in extreme situations | . Lesson 13 . inheritance hierarchy - where a class serves as a superclass for more than one subclass | . Problem: how to paint pattern if there is no paint to pick up? . The main method . The main method in Java is arguably the most important method – it is the entry-point into any Java program. The syntax is the same for any Java program. The JVM (Java Virtual Machine) executes Java byte code, and the main method must have specific syntax for the JVM to identify it and execute its contents. . public static void main(String[] args) . public: The method needs to be public for the JVM to identify it. . static: static in this context means that there will be only one type of this method and that it will be shared. When we call the main method, it does not require a new instantiated object – it can be called without the creation of a new object. . void: There is nothing returned from the main method. . main: The general signature of the main method that is identified by the JVM to execute any program from start to finish. . String[] args: The main method&#39;s argument (or input parameter) is an array of type String. This allows the method to accept command line arguments, which are stored as Strings in this variable. The name args can be changed. . Examples . This method will be identified by the JVM and will execute accordingly assuming there are no other errors. . public static void main(String [] args) { System.out.println(&quot;Main Method&quot;); } . Syntax . public static void main(String[] args) .",
            "url": "https://lindaliu1202.github.io/lindaliu_blog/jupyter/2022/09/05/key_learnings.html",
            "relUrl": "/jupyter/2022/09/05/key_learnings.html",
            "date": " • Sep 5, 2022"
        }
        
    
  
    
        ,"post29": {
            "title": "Primitives",
            "content": "Define in a Class the following data types . Demonstrate use of Primitives: int, double, boolean, string | Demonstrate use of Wrapper Class object: String | . Describe in comments how each data type choice is appropriate to application . public class DefinePrimitives { public static void main(String[] args) { int anInt = 55; //can be used to calculate people&#39;s age or grades double aDouble = 12.2; //can be used in a grade calculator boolean aBoolean = false; //can be used in a survay // not primitives but essential String aString = &quot;Hello, I am Linda Liu!&quot;; // can be used to display text String aStringFormal = new String(&quot;Greetings, World!&quot;); System.out.println(&quot;anInt: &quot; + anInt); System.out.println(&quot;aDouble: &quot; + aDouble); System.out.println(&quot;aBoolean: &quot; + aBoolean); System.out.println(&quot;aString: &quot; + aString); System.out.println(&quot;aStringFormal: &quot; + aStringFormal); } } DefinePrimitives.main(null) . anInt: 55 aDouble: 12.2 aBoolean: false aString: Hello, I am Linda Liu! aStringFormal: Greetings, World! . Perform arithmetic expressions and assignment in a program code . simple operations | use compound assignment operator to perform an operation on both operands and store the result into the variable on the left | . Perform compound assignment operator (ie +=), add comments to describe the result of operator . int a = 10; int b = 5; int c = 100; int d = 0; d = ( a + b ) * c; System.out.println(&quot;d = &quot; + d); d /= c; //use compound assignment operator (/=) System.out.println(&quot;d = &quot; + d); d += (a * b); //use compound assignment operator (+=) System.out.println(&quot;d = &quot; + d); . d = 1500 d = 15 d = 65 . Determine what is result is in a variable as a result of an data type and expression (ie integer vs double) . the result of the variable d as a result of the operations (of intergers) is also an interger | . Perform an arithmetic expressions that uses casting, add comments that show how it produces desired result. . we use casting in java to change the data type of a variable frome one type to another | if one of the value in an expression is a double, java will assume that you want a double result or we can use the casting operator double | . | we can also use the casting operators to round | . System.out.println(10/5); System.out.println(10.0/5); System.out.println((double) 10/5); //use casting operator double in () . 2 2.0 2.0 . double number = 10/3; System.out.println((double)10/3); System.out.println((int)10/3); //int will drop everything after decimal, not rounding it int roundedNumber = (int) (number + 1.1); //add 1.1 to the number, cast that as an int, store result in roundedNumber System.out.println(roundedNumber); . 3.3333333333333335 3 4 .",
            "url": "https://lindaliu1202.github.io/lindaliu_blog/jupyter/2022/08/29/primitives.html",
            "relUrl": "/jupyter/2022/08/29/primitives.html",
            "date": " • Aug 29, 2022"
        }
        
    
  
    
        ,"post30": {
            "title": "Installation Check",
            "content": "Python Installed . python --version . Python 3.9.12 . python2 --version . Python 2.7.18 . python3 --version . Python 3.9.12 . Anaconda Installed . anaconda --version . anaconda Command line client (version 1.9.0) . conda info . active environment : base active env location : /Users/lin/opt/anaconda3 shell level : 1 user config file : /Users/lin/.condarc populated config files : conda version : 4.13.0 conda-build version : 3.21.8 python version : 3.9.12.final.0 virtual packages : __osx=10.16=0 __unix=0=0 __archspec=1=x86_64 base environment : /Users/lin/opt/anaconda3 (writable) conda av data dir : /Users/lin/opt/anaconda3/etc/conda conda av metadata url : None channel URLs : https://repo.anaconda.com/pkgs/main/osx-64 https://repo.anaconda.com/pkgs/main/noarch https://repo.anaconda.com/pkgs/r/osx-64 https://repo.anaconda.com/pkgs/r/noarch package cache : /Users/lin/opt/anaconda3/pkgs /Users/lin/.conda/pkgs envs directories : /Users/lin/opt/anaconda3/envs /Users/lin/.conda/envs platform : osx-64 user-agent : conda/4.13.0 requests/2.27.1 CPython/3.9.12 Darwin/21.5.0 OSX/10.16 UID:GID : 501:20 netrc file : None offline mode : False . Homebrew Installed . brew --version . Homebrew 3.5.10 Homebrew/homebrew-core (git revision fa385accb12; last commit 2022-08-24) . Jupyter Installed and Check Kernels . conda --version jupyter kernelspec list # list installed kernels . conda 4.13.0 Available kernels: bash /Users/lin/Library/Jupyter/kernels/bash java /Users/lin/Library/Jupyter/kernels/java javascript /Users/lin/Library/Jupyter/kernels/javascript python3 /Users/lin/opt/anaconda3/share/jupyter/kernels/python3 . Bash Kernel Installed . bash --version jupyter kernelspec list # list kernels . GNU bash, version 3.2.57(1)-release (x86_64-apple-darwin21) Copyright (C) 2007 Free Software Foundation, Inc. . npm -version # node package manager comes with nodejs jupyter kernelspec list # list kernels . 6.4.1 Available kernels: bash /Users/lin/Library/Jupyter/kernels/bash java /Users/lin/Library/Jupyter/kernels/java javascript /Users/lin/Library/Jupyter/kernels/javascript python3 /Users/lin/opt/anaconda3/share/jupyter/kernels/python3 . Java Kernel Installed . jupyter kernelspec list # list kernels . Available kernels: bash /Users/lin/Library/Jupyter/kernels/bash java /Users/lin/Library/Jupyter/kernels/java javascript /Users/lin/Library/Jupyter/kernels/javascript python3 /Users/lin/opt/anaconda3/share/jupyter/kernels/python3 . Java Installed . java --version . openjdk 17.0.4 2022-07-19 OpenJDK Runtime Environment Temurin-17.0.4+8 (build 17.0.4+8) OpenJDK 64-Bit Server VM Temurin-17.0.4+8 (build 17.0.4+8, mixed mode) .",
            "url": "https://lindaliu1202.github.io/lindaliu_blog/jupyter/2022/08/28/installation_check.html",
            "relUrl": "/jupyter/2022/08/28/installation_check.html",
            "date": " • Aug 28, 2022"
        }
        
    
  
    
        ,"post31": {
            "title": "Python Usage 'Hello World'",
            "content": "msg = &quot;Hello World&quot; print(msg) . Hello World .",
            "url": "https://lindaliu1202.github.io/lindaliu_blog/jupyter/2022/08/25/python.html",
            "relUrl": "/jupyter/2022/08/25/python.html",
            "date": " • Aug 25, 2022"
        }
        
    
  
    
        ,"post32": {
            "title": "Java Usage 'Hello World'",
            "content": "// Define Static Method within a Class public class HelloStatic { // Java standard runtime entry point public static void main(String[] args) { System.out.println(&quot;Hello World!&quot;); } } // A method call allows us to execute code that is wrapped in Class HelloStatic.main(null); // Class prefix allows reference of Static Method . Hello World! .",
            "url": "https://lindaliu1202.github.io/lindaliu_blog/jupyter/2022/08/25/java.html",
            "relUrl": "/jupyter/2022/08/25/java.html",
            "date": " • Aug 25, 2022"
        }
        
    
  
    
        ,"post33": {
            "title": "Markdown Page",
            "content": "Markdown . This is an example of a markdown page! . Tomorrow X Together . What are the memebers from Tomorrow X Together: . Yeonjun | Soobin | Beomgyu | Taehyun | Huening Kai | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019",
            "url": "https://lindaliu1202.github.io/lindaliu_blog/markdown/2022/08/23/markdown.html",
            "relUrl": "/markdown/2022/08/23/markdown.html",
            "date": " • Aug 23, 2022"
        }
        
    
  
    
        ,"post34": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://lindaliu1202.github.io/lindaliu_blog/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post35": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://lindaliu1202.github.io/lindaliu_blog/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "My name is Linda Liu. I am a Junior at Del Norte High School. :) . .",
          "url": "https://lindaliu1202.github.io/lindaliu_blog/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  
      ,"page2": {
          "title": "College Board",
          "content": "This page will be used to capture information about college board units. I will be putting everything about college board and AP exam on this page. PBL will most likely be markdown pages or Jupyter notebooks. . link to vocab page .",
          "url": "https://lindaliu1202.github.io/lindaliu_blog/college_board/",
          "relUrl": "/college_board/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
      ,"page8": {
          "title": "Vocab",
          "content": "(from Code.org) . . Vocab Definition . assignment | using the assignment operator ( = ) to initialize or change the value stored in a variable | . data type | the format of the data that can be stored in a variable | . declaration | giving a name and data type to a variable | . initialization | giving a starting value to a variable using the assignment operator ( = ) | . literal | a source code representation of a value, such as a number or text | . primitive type | a basic data type that Java predefines | . reference type | a data type that contains a pointer to the memory location of an object | . variable | a container that stores a value in memory | . attribute | a characteristic of an object | . behavior | an action that an object can perform | . bug | an error in the code | . class | a programmer-defined blueprint from which objects are created | . constructor | a block of code that has the same name as the class and tells the computer how to create a new object | . debugging | finding and fixing problems in an algorithm or program | . instantiate | to call the constructor to create an object | . object | an instance of a class | . object-oriented programming | an approach to creating and using models of physical or imagined objects | . package | a collection of similar classes | . state | the attributes of an object that are represented by its instance variables | . Procedural Abstraction | allows a programmer to use a method by knowing what the method does even if they do not know how the method was written | . void method | a method that performs an action but does not return a value | . argument | a value passed to a method or constructor when the method or constructor is called | . dot operator | used to call a method in a class | . method | a named set of instructions to perform a task | . parameter | a variable in the method or constructor signature that defines the type of value to receive when the method or constructor is called | . boolean | a primitive data type that can be either true or false | . if statement | a conditional statement that only executes when the condition is true | . condition | determines whether or not to execute a block of code | . conditional statement | a statement that only executes when a condition is true | . logic error | an error that occurs when the code runs but does not do what was expected | . return | to exit a method and go back to the point in the program that called it with the requested value or information | . super keyword | a keyword used to refer to the superclass | . constructor signature | the first line of the constructor which includes the public keyword, the constructor name, and the values to specify when an object is created | . inheritance | an object-oriented programming principle where a subclass inherits the attributes and behaviors of a superclass | . subclass | a class that extends a superclass and inherits its attributes and behaviors | . superclass | a class that can be extended to create subclasses | . Vocab Definition .   |   | .   |   | .   |   | .   |   | .   |   | .   |   | .   |   | .   |   | .",
          "url": "https://lindaliu1202.github.io/lindaliu_blog/vocab/",
          "relUrl": "/vocab/",
          "date": ""
      }
      
  

  
  

  
  

  
  

  

  

  
  

  
      ,"page15": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://lindaliu1202.github.io/lindaliu_blog/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}